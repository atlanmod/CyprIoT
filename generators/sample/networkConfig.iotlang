// ## Process  : 
//
// * Input : IoTlang file
// * IoTllang file contains : 
//	** import thingml files of each thing involved in the 
//  ** Network Configuration
//  ** Policy to be enforced
// * Code generator that generate code of things using tweaked version of Thingml
// * Access control rules in various format
// Requirements
// * For each thing you provide a thingml file, the file has to be error free otherwise it will not generate code
// * The exposed ports has to have the same name than the targeted port in thingml
// * Imports in the file are not supported, the model has to be self-contained, i.e all the info regarding the file has to be in the file itself

// USE CASE 1 :


// We have 4 temperature sensors, temperature is sensed every 5 seconds. The air conditionner 
// can work only when the average of all temperature data is more than 25. The air conditionner has to receive the temperature
// data from the 4 sensors through a publish/subscribe channel.

// ## Topic organisation : domain/topicName/thingType/instanceName/portName/sendsOrReceives/

// Each type is owner of a specific topic, permission to the topic is given in the policy
// We assume all topic are denied
// Policy strategies :
// * Override : Access is given according to the network config but policy can block access to topics event if 
//   they are specified in the network configuration if access is not given in the policy then topic access cannot be possible
// * Enforce : everything is assumed denied, policy can give access. Otherwise communication is not possible. We ignore rule in
//   the network configuration.

// ## Example 1 : Temperature deny:send AirConditionner | Temperature allow:send Monitor
// * Temperature publish (write) to : domain/topic1/Temperature/instanceTemp/#
// * Monitor can subscribe (read) to domain/topic1/Temperature/instanceTemp/#
// * AirConditionner can't subscribe (read) to domain/topic1/Temperature/instanceTemp/#

// ## Example 2 : Temperature deny:receive AirConditionner | Temperature allow:receive Monitor
// * Temperature can publish (write) to : domain/topic1/Monitor/instanceMon/#
// * Temperature can't subscribe (read) to domain/topic1/AirConditionner/airConditionner/#

// ## Example 3 : AirConditionner deny:send Temperature | Monitor allow:send Temperature
// * Temperature subscribe (read) to : domain/topic1/Monitor/instanceMon/#
// * Temperature can't subscribe (read) to domain/topic1/AirConditionner/airConditionner/#
// * AirConditionner can't subscribe (read) to domain/topic1/Temperature/instanceTemp/#

// ## Example 4 : AirConditionner deny:receive Temperature | Monitor allow:receive Temperature
// * Temperature publish (write) to : domain/topic1/Temperature/instanceTemp/#
// * Temperature can subscribe (read) to domain/topic1/Monitor/instanceMon/#
// * AirConditionner can't subscribe (read) to domain/topic1/Temperature/instanceTemp/#

// ## Example 2 : AirConditionner deny:send Temperature | AirConditionner allow:send Monitor
// * AirConditionner publish to domain/topic1/AirConditionner/instanceAir/temperatureData/sends
// * Temperature can't subscribe to domain/topic1/AirConditionner/instanceAir/temperatureData/sends 


import Temperature "temperature.thingml" (exposePort inout) assignRole sensor,globalDevice priority(99)

import AirConditionner "airconditionner.thingml" (exposePort inout)

import Monitor "monitor.thingml" (exposePort inout)

role sensor grant:write dapi priority(5)
role globalDevice grant:write central priority(5)

channel:pubsub MqttChannel {
	topic dapi
	topic central
}

policy roomPolicy {
	rule AirConditionner allow:send Temperature priority(2)
	rule Temperature allow:send AirConditionner
}

networkConfiguration roomConfiguration {
	domain "fr.imt.dapi.roomA246"
	enforce roomPolicy format txt
	instanceThing instanceTemperature1:Temperature id "instanceTemperature" password "instanceTemp123" target cposix
	instanceThing instanceTemperature2:Temperature id "instanceTemperature2" password "instanceTemp123" target cposix
	instanceThing instanceTemperature3:Temperature id "instanceTemperature3" password "instanceTemp123" target cposix
	instanceThing instanceAirconditionner:AirConditionner id "airConditionner1" password "instanceTemp123" target java
	instanceThing instanceMonitor1:Monitor id "instanceMonitor1" password "instanceTemp123" target cposix
	instancePubSub mqttchannel:MqttChannel target "mosquitto" host "iot.eclipse.org" port "1883" over mqtt:tcp 
	bind instanceTemperature1 => mqttchannel{dapi,central}
	bind instanceTemperature1 => mqttchannel{dapi,central}
	bind instanceTemperature1 => mqttchannel{dapi,central}
	bind instanceMonitor1 <=> mqttchannel{dapi,central}
	bind instanceAirconditionner <= mqttchannel{dapi}
}