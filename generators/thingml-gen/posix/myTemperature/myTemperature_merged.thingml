object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
	@js_type "String"
datatype Integer<2>
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
	@java_primitive "true"
	@scala_type "Short"
	@SenML_type "Double"
	@ros_type "int16"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
object DHT @c_type "dht"
thing fragment tempMsgs {
	message temperatureMessage(TemperatureData : Integer)
	message temperatureMessage2(TemperatureData : Integer)
	required port temperaturePort {
		sends temperatureMessage
	}
	required port temperaturePort2 {
		sends temperatureMessage2
	}
}
thing Temperature includes tempMsgs @c_header "#include <dht.h>" @platform "arduino" {
	readonly property pin : UInt8 = 8
	property dht : DHT
	statechart temperatureSensorBehavior init setup {
		state setup {
			on entry do
				print "initialization..."
				'Serial.begin(9600);
			' & dht & '.read11(' & pin & ');'
			end
			transition -> collect
		}
		state collect {
			on entry do
				'Serial.println(' & dht & '.temperature);'
				temperaturePort!temperatureMessage('(int) ' & dht & '.temperature')
			end
			on exit 'delay(1000);'
			transition -> samplingRate
		}
		state samplingRate {
			transition -> collect
		}
	}
}
protocol MQTT
	@mqtt_broker_address "127.0.0.1"
	@mqtt_port_number "1883"
	@mqtt_escape_null "true"
	@serializer "JSON"
	@trace_level "0" ;

configuration myTemperature {
	instance temp : Temperature
	connector temp.temperaturePort over MQTT
}
