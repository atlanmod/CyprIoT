datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
object DHT @c_type "dht"
thing fragment tempMsgs {
	message temperatureMessage(TemperatureData : UInt32)
}
thing TemperaturePSM includes tempMsgs @c_header "#include <dht.h>" @platform "arduino" {
	provided port temperaturePort {
		sends temperatureMessage receives temperatureMessage
	}
	readonly property pin : UInt8 = 8
	readonly property sampling : UInt8 = 5000
	property dht : DHT
	statechart temperatureSensorBehavior init setup {
		state setup {
			on entry do
				print "initialization..."
				'Serial.begin(9600);
			' & dht & '.read11(' & pin & ');'
			end
			transition -> collect
		}
		state collect {
			on entry do
				'Serial.println(' & dht & '.temperature);'
				temperaturePort!temperatureMessage('(uint32_t)' & dht & '.temperature')
			end
			transition -> samplingRate
		}
		state samplingRate {
			on entry 'delay(' & sampling & ');'
			transition -> collect
		}
	}
}
thing TemperaturePIM includes tempMsgs {
	required port temperaturePort {
		sends temperatureMessage receives temperatureMessage
	}
	statechart pimBehaviour init showTemperature {
		state showTemperature {
			internal
			event e : temperaturePort?temperatureMessage
			action do
				print e.TemperatureData
				temperaturePort!temperatureMessage(e.TemperatureData)
			end
		}
	}
}
protocol MQTT
	@mqtt_broker_address "127.0.0.1"
	@mqtt_port_number "1883"
	@mqtt_escape_null "true"
	@serializer "Binary"
	@trace_level "0" ;

configuration temperatureCfg {
	instance temppsm : TemperaturePSM
	instance temppim : TemperaturePIM
	connector temppim.temperaturePort => temppsm . temperaturePort
	connector temppim.temperaturePort over MQTT
}
