grammar org.atlanmod.cypriot.Cypriot with org.eclipse.xtext.common.Terminals

generate cyprIoT "http://www.atlanmod.org/CyprIoT"
import "http://www.thingml.org/xtext/ThingML" as thingml

CyprIoTModel returns CyprIoTModel:
		imports+=Import*
		(
		declareTime+=Time |
		declareThings+=TypeThing | 
		declareChannels+=TypeChannel|
		specifyNetworks+=Network |
		declareUsers+=User |
		specifyPolicies+=Policy |
		declareRoles+=Role)*;

Import:
	'import' importURI=STRING 
;

NamedElement:
	User | Role | TypeThing | Network | Path | TypeChannel |
	InstanceThing | InstanceChannel | 
	Bind |  Policy | ChannelToBind | Rule | ThingAny | SubjectOther | ObjectOther |
	";" name=ID
;

Role:
	'role' name=ID
;

User :
	'user' name=ID(':' password=STRING)? ('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
;

TypeThing:
	'thing' name=ID 
		('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
		('import' importPath=STRING)?
;

// TODO Dynamicity of the configuration

PoliciesEnforcement :
	'enforce' hasEnforcedPolicies+=[Policy] ( "," hasEnforcedPolicies+=[Policy])*
;

Domain:
	'domain' name=DomainId
;
Network:
	'network' name=ID '{'
		domain=Domain
		(hasPolicyEnforcement=PoliciesEnforcement)?
		(instantiate+=Instance |
		hasBinds+=Bind |
		hasNetworkBridges+=NetworkBridge
		)*
	'}'
;

Instance:
	InstanceThing | InstanceChannel
;

InstanceThing :
	'instance' name=ID  ('['declareNumberOfInstances=INT']')? ':' typeThing=ThingToInstanciate
;

InstanceChannel:
	'instance' name=ID ':' typeChannel=ChannelToInstanciate
;

ThingToInstanciate :
	thingToInstantiate=[TypeThing] 'platform' targetedPlatform=Platform ('owner' owner=[User])?
;

ChannelToInstanciate :
	pubSubToInstantiate=[TypeChannel] 'protocol' targetedProtocol=PubSubProtocol ('(''server=' server=STRING')')?
;

TypeChannel:
	'channel' name=ID '{'
		(hasPaths+=Path)*
	'}'
;

Path:
	'path'  name=ID ('=' customName=STRING)? ('(' acceptedMessage=[thingml::Message] (':' serializer=Serializer)? ')')?  ('subpathOf' subpathOf+=[Path])?
;

enum Serializer:
	JSON='JSON' | 
	BINARY='BINARY'
;

Bind:
	'bind'	(name=ID ':')? bindsInstanceThing=[InstanceThing] ('['thingPosition=INT']')?(('.' portToBind=[thingml::Port])  | noderedPort=NODEREDPORT) bindAction=BindAction channelToBind=ChannelToBind ((bindActionBack=BindAction) bindsInstanceThingBack=[InstanceThing]"." portToBindBack=[thingml::Port])?
;

enum Platform:
	POSIX='POSIX' | 
	POSIXMT='POSIMT' |
	JAVA='JAVA' |
	ARDUINO='ARDUINO' |
	JAVASCRIPT='JAVASCRIPT' |
	GO='GO'|
	NODERED='NODERED'
;

enum PubSubProtocol:
	MQTT='MQTT' | 
	AMQP='AMQP' |
	HTTP='HTTP' | 
	COAP='COAP' |
	UPNP='UPNP' |
	ZIGBEE='ZIGBEE' |
	ZWAVE='ZWAVE'
;

enum BindAction:
	READ='<=' |
	WRITE='=>'
;

ChannelToBind:
	 targetedChannelInstance=[InstanceChannel] '{' paths+=[Path] ( "," paths+=[Path])*'}' /* TODO | filterConnectionPointsUsingRegex=RegularExpression*/
;

BridgeSubject:
	Bind | Path
;

Policy:
	'policy' name=ID '{'
		(hasRules+=Rule)*
	'}'
;

Rule:
	(RuleComm | RuleTrigger | RuleBridge) /*(conditions=Conditions)?*/

;

RuleComm:
	'rule' (name=ID ':')? commSubject=CommSubject effectComm=EffectComm commObject=CommObject
;

RuleTrigger:
	'rule' (name=ID ':')? thingWithState=ThingWithState effectTrigger=EffectTrigger
;

RuleBridge:
	'rule' (name=ID ':')? bridgeSubject=BridgeSubjectObject effectBridge=EffectBridge bridgeObject=BridgeSubjectObject
;

BridgeSubjectObject:
	 ChannelWithPath | ThingWithPort
;

CommObject :
	thingWithStateOrPort=ThingWithStateOrPort | objectOther=[ObjectOther]
;

ObjectOther:
	Role | User | ThingAny | Path | TypeChannel
;

CommSubject :
	thingWithStateOrPort=ThingWithStateOrPort | subjectOther=[SubjectOther]
;

ThingAny:
	InstanceThing | TypeThing
;

SubjectOther:
	Role | User | ThingAny
;

ThingWithStateOrPort:
	ThingWithPort | ThingWithState
;

ChannelWithPath:
	channel=[TypeChannel] '->' getPath=GetPath
;

ThingWithPort:
	thing=[ThingAny] '->' getPort=GetPort
;

ThingWithState:
	thing=[ThingAny] '->' getState=GetState
;

ThingWithFunction:
	thing=[ThingAny] '->' getFunction=GetFunction
;

GetPath:
	'path:' path=[Path]
;

GetPort:
	'port:' port=[thingml::Port]
;

GetState:
	'state:' state=[thingml::State]
;

GetFunction:
	'function:' function=[thingml::Function]
;

EffectComm:
	(deny?='deny:' | allow?='allow:') actionComm=ActionComm
;

EffectTrigger:
	'trigger:' actionTrigger=ActionTrigger
;

EffectBridge:
	'bridge:' actionBridge=ActionBridge
;

ActionTrigger:
	(performTransition='performTransition' thingToTransition=[ThingAny]) | 
	(goToState='goToState' thingWithState=ThingWithState) | 
	(executeFunction='executeFunction' thingWithFunction=ThingWithFunction)
;

enum ActionComm:
	send='send' | 
	receive='receive' |
	sendreceive='send-receive'
;

enum ActionBridge:
	from='from'| 
	to='to'
;

Conditions:
	'when' conditionExpression=ConditionsExpression
;

ConditionsExpression: OrExpression;

OrExpression returns Expression:
	AndExpression ({OrExpression.lhs=current} "or" rhs=AndExpression)*
;

AndExpression returns Expression:
	ExpressionAttribute ({AndExpression.lhs=current} "and" rhs=ExpressionAttribute)*
;

ExpressionAttribute:
	attribute=[ThingAny] '->' ((currentState?='currentState:' | nextState?='nextState:') subjectState=[thingml::State] | ( 'property:' subjectProperty=[thingml::Property] | 'message:' subjectMessage=[thingml::Message]'.'parameterMessage=[thingml::Parameter]) '=' subjectContentEqual=STRING)
;

DomainId:
	VALIDID (=>'.' VALIDID)+
;

NetworkBridge:
	'bridge' (name=ID ':')? bridgeSubject=[BridgeSubject] actionBridge=ActionBridge bridgeToChannel=ChannelToBind
;

Time: // Cron syntax
	'time' name=ID ':'cronExpression=CronExpression
;

CronExpression:
	seconds=CronElement
	minutes=CronElement
	hours=CronElement
	days=CronElement
	months=CronElement
	daysOfWeek=CronElement
	(year=CronElement)?
	| '@' constant=ID
;

CronElement:
	RangeCronElement | PeriodicCronElement
;

RangeCronElement hidden():
	TerminalCronElement ({RangeCronElement.start=current} '-' end=IntLiteral)*
;

TerminalCronElement:
	expression=(IntLiteral | ID | '*' | '?')
;

PeriodicCronElement hidden():
	expression=TerminalCronElement '/' elements=RangeCronList
;

RangeCronList hidden():
	elements+=RangeCronElement (',' elements+=RangeCronElement)*
;

IntLiteral:
	INT
;

VALIDID:
	ID;

terminal NODEREDPORT:
	'.node'('1'..'9')+;

// Terminals
	
//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//
//terminal INT returns ecore::ELong: ('0'..'9')+;
//
//terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
