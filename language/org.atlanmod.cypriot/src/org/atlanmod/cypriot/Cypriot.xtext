grammar org.atlanmod.cypriot.Cypriot with org.eclipse.xtext.common.Terminals

generate cyprIoT "http://www.atlanmod.org/CyprIoT"
import "http://www.thingml.org/xtext/ThingML" as thingml

CyprIoTModel returns CyprIoTModel:
	imports+=Import*
	(declareTime+=Time |
	declareThings+=TypeThing | 
	declareChannels+=TypeChannel|
	specifyNetworks+=Network |
	declareUsers+=User |
	specifyPolicies+=Policy |
	declareRoles+=Role
	)*;

Import:
	'import' importURI=STRING 
;

NamedElement:
	User | Role | TypeThing | Network | Path | TypeChannel |
	InstanceThing | InstanceChannel | 
	Bind | ChannelToBind | ObjectOther | TypeChannel | InstanceChannel | User | Role | Path | Policy | Rule | ThingAny | SubjectOther | ObjectOther |
	";" name=ID
;

Role:
	'role' name=ID
;

User :
	'user' name=ID(':' password=STRING)? ('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
;

TypeThing:
	'thing' name=ID 
		('import' importPath=STRING)?
		('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
;

TypeChannel:
	'channel' name=ID (('import' importPath=STRING) | ('{'
		(hasPaths+=Path)*
	'}'))
;

Path:
	'path'  name=ID ('=' customName=STRING)? ('(' acceptedMessage=[thingml::Message] (':' serializer=Serializer)? ')')?  ('fork' fork+=[Path])?
;

enum Serializer:
	JSON='JSON' | 
	BINARY='BINARY'
;

Network:
	'network' name=ID '{'
		domain=Domain
		(hasPolicyEnforcement=PoliciesEnforcement)?
		(instantiate+=Instance |
		hasBinds+=Bind |
		hasNetworkForwards+=NetworkForward
		)*
	'}'
;

PoliciesEnforcement :
	'enforce' hasEnforcedPolicies+=[Policy] (strategy+=EnforcementStrategies)? ( "," hasEnforcedPolicies+=[Policy] (strategy+=EnforcementStrategies)?)*
;

enum EnforcementStrategies:
	BESTEFFORT='Best-Effort' | 
	DENYFIRST='Deny-First' |
	ALLOWFIRST='Allow-First'
;

Domain:
	'domain' name=DomainId
;

DomainId:
	VALIDID (=>'.' VALIDID)+
;

NetworkForward:
	'forward' (name=ID ':')? forwardSubject=[ForwardSubject] 'to' forwardToChannel=ChannelToBind
;

Instance:
	InstanceThing | InstanceChannel
;

InstanceThing :
	'instance' name=ID  ('['declareNumberOfInstances=INT']')? ':' typeThing=ThingToInstanciate
;

InstanceChannel:
	'instance' name=ID ':' typeChannel=ChannelToInstanciate
;

ThingToInstanciate :
	thingToInstantiate=[TypeThing] 'platform' targetedPlatform=Platform ('owner' owner=[User])?
;

ChannelToInstanciate :
	channelToInstantiate=[TypeChannel] 'protocol' targetedProtocol=ChannelProtocol ('(''server=' server=STRING')')?
;

Bind:
	'bind'	(name=ID ':')? bindsInstanceThing=[InstanceThing] ('['thingPosition=INT']')? ('.' portToBind=[thingml::Port]) bindAction=BindAction channelToBind=ChannelToBind ((bindActionBack=BindAction) bindsInstanceThingBack=[InstanceThing]"." portToBindBack=[thingml::Port])?
;

enum Platform:
	POSIX='POSIX' | 
	POSIXMT='POSIMT' |
	JAVA='JAVA' |
	ARDUINO='ARDUINO' |
	JAVASCRIPT='JAVASCRIPT' |
	GO='GO'
;

enum ChannelProtocol:
	MQTT='MQTT' | 
	AMQP='AMQP' |
	HTTP='HTTP' | 
	COAP='COAP' |
	ZIGBEE='ZIGBEE' |
	ZWAVE='ZWAVE'
;

enum BindAction:
	READ='<=' |
	WRITE='=>'
;

ChannelToBind:
	 targetedChannelInstance=[InstanceChannel] '{' paths+=[Path] ( "," paths+=[Path])*'}'
;

ForwardSubject:
	Bind
;

IntLiteral:
	INT
;

VALIDID:
	ID;

// Policy

Policy:
	'policy' name=ID '{'
		(hasRules+=Rule)*
	'}'
;

Rule:
	(RuleComm | RuleTrigger) conditions=Conditions

;

RuleComm:
	'rule' (name=ID ':')? commSubject=CommSubject effectComm=EffectComm commObject=CommObject
;

RuleTrigger:
	'rule' (name=ID ':')? thingWithState=ThingWithState effectTrigger=EffectTrigger
;

CommObject :
	thingWithStateOrPort=ThingWithStateOrPort | objectOther=[ObjectOther]
;

ObjectOther:
	Role | User | InstanceThing | TypeThing | Path | TypeChannel
;

CommSubject :
	thingWithStateOrPort=ThingWithStateOrPort | subjectOther=[SubjectOther]
;

ThingAny:
	InstanceThing | TypeThing
;

SubjectOther:
	Role | User | InstanceThing | TypeThing
;

ThingWithStateOrPort:
	ThingWithPort | ThingWithState
;

ThingWithPort:
	thing=[ThingAny] '->' 'port:' port=[thingml::Port]
;

ThingWithState:
	thing=[ThingAny] '->' 'state:' state=[thingml::State]
;

ThingWithFunction:
	thing=[ThingAny] '->' 'function:' function=[thingml::Function] ('(' (parameters+=STRING) (',' (parameters+=STRING))* ')')?
;

EffectComm:
	(deny?='deny:' | allow?='allow:') actionComm=ActionComm
;

EffectTrigger:
	'trigger:' actionTrigger=ActionTrigger
;

ActionTrigger:
	(goToState='goToState' thingWithState=ThingWithState) | 
	(executeFunction='executeFunction' thingWithFunction=ThingWithFunction)
;

enum ActionComm:
	send='send' | 
	receive='receive' |
	sendreceive='send-receive'
;

Conditions:
	'when' conditionExpression=Time
;

Time:
	'time' name=ID ':'cronExpression=CronExpression
;

CronExpression:
	seconds=CronElement
	minutes=CronElement
	hours=CronElement
	days=CronElement
	months=CronElement
	daysOfWeek=CronElement
	(year=CronElement)?
	| '@' constant=ID
;

CronElement:
	RangeCronElement | PeriodicCronElement
;

RangeCronElement hidden():
	TerminalCronElement ({RangeCronElement.start=current} '-' end=IntLiteral)*
;

TerminalCronElement:
	expression=(IntLiteral | ID | '*' | '?')
;

PeriodicCronElement hidden():
	expression=TerminalCronElement '/' elements=RangeCronList
;

RangeCronList hidden():
	elements+=RangeCronElement (',' elements+=RangeCronElement)*
;