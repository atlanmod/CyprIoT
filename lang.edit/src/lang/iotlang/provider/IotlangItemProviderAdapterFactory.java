/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.provider;

import java.util.ArrayList;
import java.util.Collection;

import lang.iotlang.util.IotlangAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IotlangItemProviderAdapterFactory extends IotlangAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IotlangItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.IoTLangModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IoTLangModelItemProvider ioTLangModelItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.IoTLangModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIoTLangModelAdapter() {
		if (ioTLangModelItemProvider == null) {
			ioTLangModelItemProvider = new IoTLangModelItemProvider(this);
		}

		return ioTLangModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.TargetAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetAnnotationItemProvider targetAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.TargetAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAnnotationAdapter() {
		if (targetAnnotationItemProvider == null) {
			targetAnnotationItemProvider = new TargetAnnotationItemProvider(this);
		}

		return targetAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Thing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingItemProvider thingItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Thing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingAdapter() {
		if (thingItemProvider == null) {
			thingItemProvider = new ThingItemProvider(this);
		}

		return thingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Channel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelItemProvider channelItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Channel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelAdapter() {
		if (channelItemProvider == null) {
			channelItemProvider = new ChannelItemProvider(this);
		}

		return channelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.PubSub} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PubSubItemProvider pubSubItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.PubSub}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPubSubAdapter() {
		if (pubSubItemProvider == null) {
			pubSubItemProvider = new PubSubItemProvider(this);
		}

		return pubSubItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.ReqRep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqRepItemProvider reqRepItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.ReqRep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqRepAdapter() {
		if (reqRepItemProvider == null) {
			reqRepItemProvider = new ReqRepItemProvider(this);
		}

		return reqRepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Policy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyItemProvider policyItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Policy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyAdapter() {
		if (policyItemProvider == null) {
			policyItemProvider = new PolicyItemProvider(this);
		}

		return policyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Datatype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeItemProvider datatypeItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Datatype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeAdapter() {
		if (datatypeItemProvider == null) {
			datatypeItemProvider = new DatatypeItemProvider(this);
		}

		return datatypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter() {
		if (protocolItemProvider == null) {
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Topic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopicItemProvider topicItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Topic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopicAdapter() {
		if (topicItemProvider == null) {
			topicItemProvider = new TopicItemProvider(this);
		}

		return topicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.InstanceThing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceThingItemProvider instanceThingItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.InstanceThing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceThingAdapter() {
		if (instanceThingItemProvider == null) {
			instanceThingItemProvider = new InstanceThingItemProvider(this);
		}

		return instanceThingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.InstancePubSub} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstancePubSubItemProvider instancePubSubItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.InstancePubSub}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstancePubSubAdapter() {
		if (instancePubSubItemProvider == null) {
			instancePubSubItemProvider = new InstancePubSubItemProvider(this);
		}

		return instancePubSubItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.InstanceReqRep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceReqRepItemProvider instanceReqRepItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.InstanceReqRep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceReqRepAdapter() {
		if (instanceReqRepItemProvider == null) {
			instanceReqRepItemProvider = new InstanceReqRepItemProvider(this);
		}

		return instanceReqRepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.InstanceChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceChannelItemProvider instanceChannelItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.InstanceChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceChannelAdapter() {
		if (instanceChannelItemProvider == null) {
			instanceChannelItemProvider = new InstanceChannelItemProvider(this);
		}

		return instanceChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.PortConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortConfigurationItemProvider portConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.PortConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortConfigurationAdapter() {
		if (portConfigurationItemProvider == null) {
			portConfigurationItemProvider = new PortConfigurationItemProvider(this);
		}

		return portConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.NetworkConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkConfigurationItemProvider networkConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.NetworkConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkConfigurationAdapter() {
		if (networkConfigurationItemProvider == null) {
			networkConfigurationItemProvider = new NetworkConfigurationItemProvider(this);
		}

		return networkConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Bind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindItemProvider bindItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Bind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindAdapter() {
		if (bindItemProvider == null) {
			bindItemProvider = new BindItemProvider(this);
		}

		return bindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lang.iotlang.Connect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectItemProvider connectItemProvider;

	/**
	 * This creates an adapter for a {@link lang.iotlang.Connect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectAdapter() {
		if (connectItemProvider == null) {
			connectItemProvider = new ConnectItemProvider(this);
		}

		return connectItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ioTLangModelItemProvider != null) ioTLangModelItemProvider.dispose();
		if (targetAnnotationItemProvider != null) targetAnnotationItemProvider.dispose();
		if (thingItemProvider != null) thingItemProvider.dispose();
		if (channelItemProvider != null) channelItemProvider.dispose();
		if (pubSubItemProvider != null) pubSubItemProvider.dispose();
		if (reqRepItemProvider != null) reqRepItemProvider.dispose();
		if (policyItemProvider != null) policyItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
		if (datatypeItemProvider != null) datatypeItemProvider.dispose();
		if (protocolItemProvider != null) protocolItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (topicItemProvider != null) topicItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (instanceThingItemProvider != null) instanceThingItemProvider.dispose();
		if (instancePubSubItemProvider != null) instancePubSubItemProvider.dispose();
		if (instanceReqRepItemProvider != null) instanceReqRepItemProvider.dispose();
		if (instanceChannelItemProvider != null) instanceChannelItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (portConfigurationItemProvider != null) portConfigurationItemProvider.dispose();
		if (networkConfigurationItemProvider != null) networkConfigurationItemProvider.dispose();
		if (bindItemProvider != null) bindItemProvider.dispose();
		if (connectItemProvider != null) connectItemProvider.dispose();
	}

}
