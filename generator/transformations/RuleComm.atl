-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module RuleComm;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;
uses Helpers;
-- Get the network to make (support for first network only for the moment)
helper def : firstNetwork() : CyprIoT!Network = CyprIoT!Network.allInstances().first();

-- Contains

helper context CyprIoT!Network def : bindsContainingThingInNetwork() : Sequence(CyprIoT!Bind) = 
	self.hasBinds->select(b | b.isBindMatchesInputThing())
;

helper context CyprIoT!Network def : bindsContainingThingObjectInNetwork(pathName : String, commAction : String) : Sequence(Sequence(String)) =
	self.hasBinds->select(b | not(b.channelToBind.paths->select(p | p.name=pathName).isEmpty()) and b.bindAction.toString().convertArrowToSendOrReceive()=commAction)
;

-- Collects

helper context CyprIoT!Network def : collectEnforcedPoliciesInNetwork() : Sequence(CyprIoT!Policy) = self.hasPolicyEnforcement.hasEnforcedPolicies;


helper context Sequence(CyprIoT!RuleComm) def : collectRulesCommElements() : Sequence(Sequence(String)) =
	self->collect(r | Sequence{r.commSubject.subjectOther.name ,r.effectComm.allow,r.effectComm.actionComm.toString().removeHash(),r.commObject.objectOther})
;

helper context CyprIoT!Policy def : collectRuleCommFromPolicy() : Sequence(CyprIoT!RuleComm) =
	self.hasRules->select(r | r.oclIsTypeOf(CyprIoT!RuleComm))
;

helper context Sequence(CyprIoT!RuleComm) def : collectRulesCommWithThingInSubject() : Sequence(CyprIoT!RuleComm) =
	self->select(r | r.oclAsType(CyprIoT!RuleComm).isSubjectOfRuleTypeThing() and r.oclAsType(CyprIoT!RuleComm).commSubject.subjectOther.name=thisModule.nameOfInputThing())->flatten()
;

helper context CyprIoT!Policy def : collectRulesCommWithThingInSubjectFromPolicy() : Sequence(CyprIoT!RuleComm) =
	self.collectRuleCommFromPolicy().collectRulesCommWithThingInSubject()
;

helper context Sequence(CyprIoT!Policy) def : rulesContainingThingInSubjectInPolicies() : Sequence(CyprIoT!RuleComm) =
	self->collect(p | p.collectRulesCommWithThingInSubjectFromPolicy())->flatten()
;

helper context CyprIoT!Network def : rulesContainingThingInSubjectInEnforcedPolicies() : Sequence(CyprIoT!RuleComm) =
	self.collectEnforcedPoliciesInNetwork().rulesContainingThingInSubjectInPolicies()
;

-- Checks
helper context ThingML!PlatformAnnotation def : isAnnotationContainerExternalConnector() : Boolean = 
	self.refImmediateComposite().oclIsTypeOf(ThingML!ExternalConnector)
;

helper context CyprIoT!RuleComm def : isRuleSend() : Boolean = self.effectComm.actionComm.toString().removeHash()='send';

helper context CyprIoT!RuleComm def : isRuleReceive() : Boolean = self.effectComm.actionComm.toString().removeHash()='receive';

helper context CyprIoT!RuleComm def : isRuleDeny() : Boolean = self.effectComm.deny;

helper context CyprIoT!RuleComm def : isThingInRuleSubject() : Boolean =
	self.commSubject.subjectOther.oclAsType(CyprIoT!TypeThing).name=thisModule.nameOfInputThing()	
;

helper context CyprIoT!Bind def : isThingInBind() : Boolean =
	self.bindsInstanceThing.typeThing.thingToInstantiate.name=thisModule.nameOfInputThing()
;

--Subjects checks

helper context CyprIoT!RuleComm def : isSubjectOfRuleThingAny() : Boolean = self.commSubject.subjectOther.oclIsTypeOf(CyprIoT!ThingAny);

helper context CyprIoT!RuleComm def : isSubjectOfRuleTypeThing() : Boolean = self.commSubject.subjectOther.oclIsTypeOf(CyprIoT!TypeThing);

helper context CyprIoT!RuleComm def : isSubjectOfRuleInstanceThing() : Boolean = self.commSubject.subjectOther.oclIsTypeOf(CyprIoT!InstanceThing);

helper context CyprIoT!RuleComm def : isSubjectOfRuleRole() : Boolean = self.commSubject.subjectOther.oclIsTypeOf(CyprIoT!Role);

helper context CyprIoT!RuleComm def : isSubjectOfRuleUser() : Boolean = self.commSubject.subjectOther.oclIsTypeOf(CyprIoT!User);

--Objects checks

helper context CyprIoT!RuleComm def : isObjectOfRuleTypeChannel() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!TypeChannel);

helper context CyprIoT!RuleComm def : isObjectOfRuleRole() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!Role);

helper context CyprIoT!RuleComm def : isObjectOfRuleUser() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!User);

helper context CyprIoT!RuleComm def : isObjectOfRuleThingAny() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!ThingAny);

helper context CyprIoT!RuleComm def : isObjectOfRuleTypeThing() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!TypeThing);

helper context CyprIoT!RuleComm def : isObjectOfRuleInstanceThing() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!InstanceThing);

helper context CyprIoT!RuleComm def : isObjectOfRulePath() : Boolean = self.commObject.objectOther.oclIsTypeOf(CyprIoT!Path);

-- First of ... (for simplicity and debugging)

helper def : firstEnforcedPolicy() : CyprIoT!Policy = thisModule.enforcedPoliciesInFirstNetwork().first();

helper def : enforcedPoliciesInFirstNetwork() : Sequence(CyprIoT!Policy) = thisModule.firstNetwork().collectEnforcedPoliciesInNetwork();

helper def : firstRuleInPolicyFromFirstEnforcedPolicy() : CyprIoT!Rule = thisModule.firstEnforcedPolicy().hasRules.first();

helper def : firstBind() : CyprIoT!Bind = thisModule.firstNetwork().hasBinds.first();

helper context CyprIoT!Policy def : firstRuleOfPolicyAsRuleComm() : CyprIoT!RuleComm = self.hasRules.first().oclAsType(CyprIoT!RuleComm);

helper def : rulesContainingThingInSubjectInFirstNetwork() : Sequence(CyprIoT!RuleComm) =
	thisModule.enforcedPoliciesInFirstNetwork().rulesContainingThingInSubjectInPolicies()
;

-- Checks of first (for simplicity and debugging)

helper context CyprIoT!PoliciesEnforcement def : isThingInFirstBind() : Boolean =
	self.refImmediateComposite().oclAsType(CyprIoT!Network).hasBinds.first().isThingInBind()
;

helper context CyprIoT!Policy def : isThingInFirstRuleSubject() : Boolean =
	if(self.firstRuleOfPolicyAsRuleComm().isSubjectOfRuleTypeThing())
		then (self.firstRuleOfPolicyAsRuleComm().isThingInRuleSubject())	
	else false endif
;

helper def : isFirstRuleOfFirstPolicyEnforcingThing() : Boolean = thisModule.firstEnforcedPolicy().isThingInFirstRuleSubject();

helper def : isThingInFirstBindFromFirstEnforcedPolicy() : String = thisModule.firstNetwork().hasPolicyEnforcement.isThingInFirstBind();

helper def : isFirstRuleOfFirstPolicyDeny() : Boolean = thisModule.firstRuleInPolicyFromFirstEnforcedPolicy().oclAsType(CyprIoT!RuleComm).isRuleDeny();

helper def : isFirstRuleOfFirstPolicySend() : Boolean = thisModule.firstRuleInPolicyFromFirstEnforcedPolicy().oclAsType(CyprIoT!RuleComm).isRuleSend();

helper def : isFirstRuleOfFirstPolicyReceive() : Boolean = thisModule.firstRuleInPolicyFromFirstEnforcedPolicy().oclAsType(CyprIoT!RuleComm).isRuleReceive();

helper def : isObjectPubSubInFirstRule() : Boolean = thisModule.firstRuleInPolicyFromFirstEnforcedPolicy().oclAsType(CyprIoT!RuleComm).isObjectOfRulePubSub();

helper def : actionOfFirstBind() : String = thisModule.firstBind().bindAction.toString();

-- Enforce or not (Boolean)

helper context ThingML!PlatformAnnotation def : noEnforcing() : Boolean = not(self.enforceDenySubscribe() or self.enforceDenyPublish());

helper context ThingML!PlatformAnnotation def : enforceMe() : Boolean = 
	thisModule.firstNetwork().bindsContainingThingInNetwork().first()
;

helper def : bindOfInputThing() : CyprIoT!Bind = thisModule.firstNetwork().bindsContainingThingInNetwork().first();

helper context CyprIoT!Bind  def : typeThingOfBind() : CyprIoT!TypeThing = self.bindsInstanceThing.typeThing.thingToInstantiate;

helper context CyprIoT!Bind  def : actionOfBindConverted() : String = self.bindAction.toString().convertArrowToSendOrReceive();

helper def : inputThingFromBind() : CyprIoT!TypeThing = thisModule.bindOfInputThing().typeThingOfBind();

helper context CyprIoT!RuleComm def : isInputThingInstanceInSubject() : Boolean = self.isSubjectOfRuleInstanceThing() and thisModule.nameOfInputThing()=self.commSubject.subjectOther.name;

helper context CyprIoT!RuleComm def : isTypeInputThingInSubject() : Boolean = self.isSubjectOfRuleTypeThing() and thisModule.bindOfInputThing().typeThingOfBind().name=self.commSubject.subjectOther.name;

helper context CyprIoT!RuleComm def : isInputThingInSubjectRoles() : Boolean = self.isSubjectOfRuleRole() and not(thisModule.inputThingFromBind().assignedRoles.oclIsUndefined()) and
	(self.isInputThingInSubjectRole());

helper context CyprIoT!RuleComm def : isInputThingInSubjectRole() : Boolean = thisModule.inputThingFromBind().assignedRoles->exists(r | r.name=self.commSubject.subjectOther.name);

helper context CyprIoT!RuleComm def : isInputThingInObjectRole() : Boolean = thisModule.inputThingFromBind().assignedRoles->exists(r | r.name=self.commObject.objectOther.name);


helper context CyprIoT!RuleComm def : isActionInBindAndRuleMatching() : Boolean = thisModule.bindOfInputThing().actionOfBindConverted()=self.effectComm.actionComm.toString().removeHash();

helper context CyprIoT!RuleComm def : isAnnotationPathMatchesRulePath(annotation : ThingML!PlatformAnnotation) : Boolean = annotation.value=self.getFullPathOfRule();

helper context CyprIoT!RuleComm def : isAnnotationPathMatchesRuleChannel(annotation : ThingML!PlatformAnnotation) : Boolean = self.commObject.objectOther.oclAsType(CyprIoT!TypeChannel).hasPaths->exists(p | annotation.value=thisModule.bindOfInputThing().getFullPathName(p));

helper context CyprIoT!RuleComm def : isAnyBindMirrorActionInputThing(annotation : ThingML!PlatformAnnotation) : Boolean = thisModule.firstNetwork().hasBinds->exists(b | b.typeThingOfBind().name=self.commObject.objectOther.name and b.actionOfBindConverted().mirrorSendOrReceive()=thisModule.bindOfInputThing().actionOfBindConverted() and b.channelToBind.paths->exists(p | annotation.value=thisModule.bindOfInputThing().getFullPathName(p)));

helper context CyprIoT!RuleComm def : getFullPathOfRule() : String = thisModule.bindOfInputThing().getFullPathName(self.commObject.objectOther.oclAsType(CyprIoT!Path));

helper context ThingML!ExternalConnector def : addAnnotationsAfterEnforcements() : Sequence(ThingML!PlatformAnnotation) = self.annotations->collect(a | if(thisModule.enforcePlatformAnnotation(a).oclIsUndefined()) then Sequence{} else thisModule.enforcePlatformAnnotation(a) endif)->flatten();

helper context ThingML!PlatformAnnotation def : enforceDenyPath(rulecomm : CyprIoT!RuleComm) : Boolean =
	((rulecomm.isInputThingInstanceInSubject().debug('instance') or rulecomm.isTypeInputThingInSubject().debug('thing')) or
	rulecomm.isInputThingInSubjectRoles()) and
	rulecomm.effectComm.deny and 
	rulecomm.isActionInBindAndRuleMatching() and
	rulecomm.isObjectOfRulePath() and
	rulecomm.isAnnotationPathMatchesRulePath(self)
;

helper context ThingML!PlatformAnnotation def : enforceDenyChannel(rulecomm : CyprIoT!RuleComm) : Boolean =
	((rulecomm.isInputThingInstanceInSubject() or rulecomm.isTypeInputThingInSubject()) or
	rulecomm.isInputThingInSubjectRoles()) and
	rulecomm.effectComm.deny and
	rulecomm.isActionInBindAndRuleMatching() and
	rulecomm.isObjectOfRuleTypeChannel() and
	rulecomm.isAnnotationPathMatchesRuleChannel(self)
;

helper context ThingML!PlatformAnnotation def : enforceSubjectAndObjectThings(rulecomm : CyprIoT!RuleComm) : Boolean =
	rulecomm.isSubjectOfRuleTypeThing() and
	rulecomm.isObjectOfRuleTypeThing() and
	rulecomm.effectComm.deny and
	rulecomm.isActionInBindAndRuleMatching() and
	rulecomm.isAnyBindMirrorActionInputThing(self)
;

helper context ThingML!PlatformAnnotation def : enforceRoles(rulecomm : CyprIoT!RuleComm) : Boolean =
	rulecomm.isSubjectOfRuleRole() and
	rulecomm.isInputThingInSubjectRole() and
	rulecomm.isObjectOfRuleRole() and
	rulecomm.effectComm.deny and
	rulecomm.isActionInBindAndRuleMatching() and
	thisModule.firstNetwork().hasBinds->exists(b | b.actionOfBindConverted().mirrorSendOrReceive()=thisModule.bindOfInputThing().actionOfBindConverted() and b.typeThingOfBind().assignedRoles->exists(r | r.name=rulecomm.commObject.objectOther.name) and b.channelToBind.paths->exists(p | self.value=thisModule.bindOfInputThing().getFullPathName(p)))
;

helper context ThingML!PlatformAnnotation def : enforceRoleAndThing(rulecomm : CyprIoT!RuleComm) : Boolean =
	rulecomm.isSubjectOfRuleRole() and
	rulecomm.isInputThingInSubjectRole() and
	rulecomm.isObjectOfRuleTypeThing() and
	rulecomm.effectComm.deny and
	rulecomm.isActionInBindAndRuleMatching() and
	thisModule.firstNetwork().hasBinds->exists(b | b.actionOfBindConverted().mirrorSendOrReceive()=thisModule.bindOfInputThing().actionOfBindConverted() and b.typeThingOfBind().name=rulecomm.commObject.objectOther.name and b.channelToBind.paths->exists(p | self.value=thisModule.bindOfInputThing().getFullPathName(p)))
;

helper context ThingML!PlatformAnnotation def : enforceThingAndRole(rulecomm : CyprIoT!RuleComm) : Boolean =
	rulecomm.isSubjectOfRuleTypeThing() and
	rulecomm.isObjectOfRuleRole() and
	rulecomm.effectComm.deny and
	rulecomm.isActionInBindAndRuleMatching() and
	thisModule.firstNetwork().hasBinds->exists(b | b.actionOfBindConverted().mirrorSendOrReceive()=thisModule.bindOfInputThing().actionOfBindConverted() and b.typeThingOfBind().assignedRoles->exists(r | r.name=rulecomm.commObject.objectOther.name) and b.channelToBind.paths->exists(p | self.value=thisModule.bindOfInputThing().getFullPathName(p)))
;

-- Problem with order of rules : What to do ?
helper context ThingML!PlatformAnnotation def : enforceAnyCommRule() : Boolean =
	not(thisModule.firstNetwork().collectEnforcedPoliciesInNetwork()
		->forAll(p | p.collectRuleCommFromPolicy()
			->exists(r | 
				self.enforceDenyPath(r) or 
				self.enforceDenyChannel(r) or
				self.enforceSubjectAndObjectThings(r) or 
				self.enforceRoles(r) or
				self.enforceRoleAndThing(r) or
				self.enforceThingAndRole(r)
				)).debug('isEnforcing'))
;

rule copyThingMLModel {
	from s : ThingML!ThingMLModel
	to t : ThingML!ThingMLModel(
		configs <- s.configs,
		imports <- s.imports,
		protocols <- s.protocols,
		types <- s.types
	)	
}

rule copyExternalConnector {
	from s : ThingML!ExternalConnector
	to t : ThingML!ExternalConnector(
		annotations <- s.addAnnotationsAfterEnforcements(),
		inst <- s.inst,
		name <- s.name,
		port <- s.port,
		protocol <- s.protocol
	)
}

lazy rule enforcePlatformAnnotation {
	from s : ThingML!PlatformAnnotation(s.enforceAnyCommRule())
	to  t : ThingML!PlatformAnnotation(
		name <- s.name,
		value <- s.value
	)
}
