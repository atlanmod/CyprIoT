-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module Network2Thing;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;
uses Helpers;

-- Copy All Platform Annotations here to avoid conflicts in RuleComm.atl

rule copyPlatformAnnotation {
	from s : ThingML!PlatformAnnotation
	to t : ThingML!PlatformAnnotation(
		name <- s.name,
		value <- s.value
	)
}

helper def : mqttNumber : Integer = 0;

rule createExternalConnectorFromBind {
	from s : CyprIoT!Bind((ThingML!Thing.allInstances().first().name=s.bindsInstanceThing.typeThing.thingToInstantiate.name))
	using {
		protocolName : String = s.channelToBind.targetedChannelInstance.typeChannel.targetedProtocol.toString().removeHash();
	}
	to 
	configuration : ThingML!Configuration(
		name <- s.bindsInstanceThing.typeThing.thingToInstantiate.name+'_Cfg',
		instances <- Sequence{instance},
		connectors <- Sequence{externalConnector},
		annotations <- Sequence{compiler}
	),
	compiler : ThingML!PlatformAnnotation(
		name <- 'compiler',
		value <- s.bindsInstanceThing.typeThing.targetedPlatform.toString().removeHash().toLower()
	),
	instance : ThingML!Instance(
		name <- s.bindsInstanceThing.name,
		type <- ThingML!Thing.allInstances().first() -- TODO : more generic
	),
	externalConnector : ThingML!ExternalConnector(
		inst <- instance,
		port <- ThingML!Port.allInstances()->select(p | p.name=s.portToBind.name).first(),
		protocol <- protocol,
		annotations <- s.getAllPathsFromBind()->collect(t | thisModule.multiplePaths(s, t))
	),
	protocol : ThingML!Protocol (
		name <- protocolName,
		annotations <- Sequence{brokerAdress,portNumber,serializer}
	),
	brokerAdress : ThingML!PlatformAnnotation(
		name <- 'mqtt_broker_address',
		value <- s.channelToBind.targetedChannelInstance.typeChannel.server.toString().split(':').first()
	),
	portNumber : ThingML!PlatformAnnotation(
		name <- 'mqtt_port_number',
		value <- s.channelToBind.targetedChannelInstance.typeChannel.server.toString().split(':').last()
	),
	serializer : ThingML!PlatformAnnotation(
		name <- 'serializer',
		value <- s.channelToBind.paths.first().serializer.toString().removeHash().toLower()
	)
	do {
		if(thisModule.mqttNumber>=1){
			protocol.name <- protocolName+thisModule.mqttNumber.toString();
		}
		thisModule.mqttNumber <- thisModule.mqttNumber + 1;
	}
}

lazy rule multiplePaths {
	from s : CyprIoT!Bind, t : CyprIoT!Path
	to annotationMqtt : ThingML!PlatformAnnotation(
		name <- s.bindAction.toString().removeHash().transformArrowToMQTTSyntax,
		value <- s.getFullPathName(t)
	)
}
