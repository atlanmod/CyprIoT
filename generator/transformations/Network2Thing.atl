-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module Network2Thing;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;
uses Helpers;

helper def : mqttNumber : Integer = 0;


rule copyState {
	from s : ThingML!State(not (s.oclIsTypeOf(ThingML!CompositeState) or s.oclIsTypeOf(ThingML!FinalState)))
	to t : ThingML!State(
		annotations <- s.annotations,
		entry <- s.entry,
		exit <- s.exit,
		internal <- s.internal,
		name <- s.name,
		outgoing <- s.outgoing,
		properties <- s.properties
	)
}

rule createExternalConnectorFromBind {
	from s : CyprIoT!Bind(s.isBindMatchesInputThing())
	using {
		protocolName : String = s.getTargetedProtocolFromBind();
	}
	to 
	configuration : ThingML!Configuration(
		name <- s.getInstanceThingNameFromBind()+'_Cfg',
		instances <- Sequence{instance},
		connectors <- Sequence{externalConnector},
		annotations <- Sequence{compiler}
	),
	compiler : ThingML!PlatformAnnotation(
		name <- 'compiler',
		value <- s.getTargetedPlatfomFromBind()
	),
	instance : ThingML!Instance(
		name <- s.bindsInstanceThing.name,
		type <- thisModule.inputThing()
	),
	externalConnector : ThingML!ExternalConnector(
		inst <- instance,
		port <- ThingML!Port.allInstances()->select(p | p.name=s.portToBind.name).first(),
		protocol <- protocol,
		annotations <- s.getAllPathsFromBind()->collect(t | thisModule.multiplePaths(s, t))
	),
	protocol : ThingML!Protocol (
		name <- protocolName,
		annotations <- Sequence{brokerAdress,portNumber,serializer}
	),
	brokerAdress : ThingML!PlatformAnnotation(
		name <- 'mqtt_broker_address',
		value <- s.getServerFromBind()
	),
	portNumber : ThingML!PlatformAnnotation(
		name <- 'mqtt_port_number',
		value <- s.getPortNumberFromBind()
	),
	serializer : ThingML!PlatformAnnotation(
		name <- 'serializer',
		value <- s.getAllPathsFromBind().first().serializer.toString().removeHash().toLower() -- Create new protocol in ThingML when multiple type of serializers
	)
	do {
		if(thisModule.mqttNumber>=1){
			protocol.name <- protocolName+thisModule.mqttNumber.toString();
		}
		thisModule.mqttNumber <- thisModule.mqttNumber + 1;
	}
}

lazy rule multiplePaths {
	from s : CyprIoT!Bind, t : CyprIoT!Path
	to annotationMqtt : ThingML!PlatformAnnotation(
		name <- s.bindAction.toString().removeHash().transformArrowToMQTTSyntax,
		value <- s.getFullPathName(t)
	)
}
