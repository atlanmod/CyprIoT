-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module Network2Thing;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;

rule createExternalConnectorFromBind {
	from s : CyprIoT!Bind((ThingML!Thing.allInstances().first().name=s.bindsInstanceThing.typeThing.thingToInstantiate.name))
	to 
	c : ThingML!Configuration(
		name <- s.bindsInstanceThing.typeThing.thingToInstantiate.name+'_Cfg',
		instances <- Sequence{instance},
		connectors <- Sequence{externalConnector},
		annotations <- Sequence{compiler}
	),
	compiler : ThingML!PlatformAnnotation(
		name <- 'compiler',
		value <- s.bindsInstanceThing.typeThing.targetedPlatform.toString().removeHash().toLower()
	),
	instance : ThingML!Instance(
		name <- s.bindsInstanceThing.name,
		type <- ThingML!Thing.allInstances().first() -- TODO : more generic
	),
	annotationMqtt : ThingML!PlatformAnnotation(
		name <- s.bindAction.toString().removeHash().transformArrowToMQTTSyntax,
		value <- s.getTopicName()
	),
	externalConnector : ThingML!ExternalConnector(
		inst <- instance,
		port <- ThingML!Port.allInstances().first(),
		protocol <- protocol,
		annotations <- Sequence{annotationMqtt}
	),
	protocol : ThingML!Protocol(
		name <- s.channelToBind.oclAsType(CyprIoT!ToBindPubSub).targetedPubSubInstance.typePubSub.targetedProtocol.toString().removeHash(),
		annotations <- Sequence{brokerAdress,portNumber,serializer}
	),
	brokerAdress : ThingML!PlatformAnnotation(
		name <- 'mqtt_broker_address',
		value <- s.channelToBind.oclAsType(CyprIoT!ToBindPubSub).targetedPubSubInstance.typePubSub.server.toString().split(':').first()
	),
	portNumber : ThingML!PlatformAnnotation(
		name <- 'mqtt_port_number',
		value <- s.channelToBind.oclAsType(CyprIoT!ToBindPubSub).targetedPubSubInstance.typePubSub.server.toString().split(':').last()
	),
	serializer : ThingML!PlatformAnnotation(
		name <- 'serializer',
		value <- s.channelToBind.oclAsType(CyprIoT!ToBindPubSub).serializer.first().toString().removeHash().toLower()
	)
}