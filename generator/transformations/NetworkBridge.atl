-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module NetworkBridge;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;
uses Helpers;

-- Get the network to make (support for first network only for the moment)
helper def : firstNetwork() : CyprIoT!Network = CyprIoT!Network.allInstances().first();


rule copyThingMLModel {
	from s : ThingML!ThingMLModel
	to t : ThingML!ThingMLModel(
		configs <- s.configs,
		imports <- s.imports,
		protocols <- if(thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclIsTypeOf(CyprIoT!Bind) and thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()=thisModule.nameOfInputThing()) then CyprIoT!NetworkBridge.allInstances()->collect(b | thisModule.resolveTemp(b, 'proto'))->union(s.protocols) else s.protocols endif ,
		types <- s.types
	)	
}

rule copyThing {
	from s : ThingML!Thing
	to t : ThingML!Thing(
		name <- s.name,
		ports <- if(thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclIsTypeOf(CyprIoT!Bind) and thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()=thisModule.nameOfInputThing()) then CyprIoT!NetworkBridge.allInstances()->collect(b | thisModule.resolveTemp(b, 'port'))->union(s.ports) else s.ports endif,
		annotations <- s.annotations,
		assign <- s.assign,
		behaviour <- s.behaviour,
		fragment <- s.fragment,
		functions <- s.functions,
		messages <- s.messages,
		includes <- s.includes,
		properties <- s.properties
	)
}

rule copyConfig {
	from s : ThingML!Configuration
	to t : ThingML!Configuration(
		annotations <- s.annotations,
		connectors <- if(thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclIsTypeOf(CyprIoT!Bind) and thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()=thisModule.nameOfInputThing()) then s.connectors->union(CyprIoT!NetworkBridge.allInstances()) else s.connectors endif ,
		instances <- s.instances,
		name <- s.name,
		propassigns <- s.propassigns
	)	
}

rule copyState {
	from s : ThingML!State(not (s.oclIsTypeOf(ThingML!CompositeState) or s.oclIsTypeOf(ThingML!FinalState)))
	to t : ThingML!State(
		annotations <- s.annotations,
		entry <- s.entry,
		exit <- s.exit,
		internal <- s.internal,
		name <- s.name,
		outgoing <- s.outgoing,
		properties <- s.properties
	)
}
rule copyCompositeState {
	from s : ThingML!CompositeState
	to t : ThingML!CompositeState(
		name <- s.name,
		annotations <- s.annotations,
		entry <- s.entry,
		exit <- s.exit,
		history <- s.history,
		initial <- s.initial,
		internal <- s.internal,
		outgoing <- s.outgoing,
		properties <- s.properties,
		region <- s.region,
		session <- s.session,
		substate <- s.substate
	)
}

helper context CyprIoT!Network def : collectEnforcedPoliciesInNetwork() : Sequence(CyprIoT!Policy) = self.hasPolicyEnforcement.hasEnforcedPolicies;
helper context CyprIoT!Policy def : collectRuleBridgeFromPolicy() : Sequence(CyprIoT!RuleBridge) =
	self.hasRules->select(r | r.oclIsTypeOf(CyprIoT!RuleBridge))
;

helper context ThingML!ExternalConnector def : applyRuleBridge(annotation : ThingML!PlatformAnnotation) : Sequence(ThingML!PlatformAnnotation) = thisModule.firstNetwork().collectEnforcedPoliciesInNetwork()->collect(p | p.collectRuleBridgeFromPolicy()->collect(r | if(r.isAnnotationPathMatchesRuleBridge(annotation)) then thisModule.multiplePaths(r.bridgeSubject.oclAsType(CyprIoT!ChannelWithPath).getPath.path,r,thisModule.firstNetwork()) else Sequence{} endif))->flatten()->union(self.annotations);

helper context CyprIoT!RuleBridge def : isAnnotationPathMatchesRuleBridge(annotation : ThingML!PlatformAnnotation) : Boolean =  self.bridgeSubject.oclAsType(CyprIoT!ChannelWithPath).channel.oclIsTypeOf(CyprIoT!TypeChannel) and annotation.name='mqtt_publish_topic' and not(annotation.value=self.getFullPathNameBridge(thisModule.firstNetwork(),self.bridgeSubject.oclAsType(CyprIoT!ChannelWithPath).getPath.path)) and thisModule.firstNetwork().instantiate->exists(s | s.oclIsTypeOf(CyprIoT!InstanceChannel) and s.oclAsType(CyprIoT!InstanceChannel).typeChannel.pubSubToInstantiate.name=self.bridgeSubject.oclAsType(CyprIoT!ChannelWithPath).channel.name) and annotation.value=self.getFullPathNameBridge(thisModule.firstNetwork(),self.bridgeSubject.oclAsType(CyprIoT!ChannelWithPath).getPath.path);


rule copyExternalConnector {
	from s : ThingML!ExternalConnector
	to t : ThingML!ExternalConnector(
		annotations <- s.annotations->collect(a | s.applyRuleBridge(a))->flatten(),
		inst <- s.inst,
		name <- s.name,
		port <- s.port,
		protocol <- s.protocol
	)
}

rule copyTransition {
	from s : ThingML!Transition
	to t : ThingML!Transition(
		action <- if(thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclIsTypeOf(CyprIoT!Bind) 
				and thisModule.firstNetwork().hasNetworkBridges.first().bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()=thisModule.nameOfInputThing() 
				and not(s.event.oclIsUndefined()) 
				and s.event.oclAsType(ThingML!ReceiveMessage).port.name=ThingML!Port.allInstances().first().name 
				and s.event.oclAsType(ThingML!ReceiveMessage).message.name=ThingML!Port.allInstances().first().receives.first().name) 
			then thisModule.groupActionTransition(s,s.event.oclAsType(ThingML!ReceiveMessage)) 
			else s.action endif,
		annotations <- s.annotations,
		event <- s.event,
		guard <- s.guard,
		name <- s.name,
		target <- s.target
	)
}
lazy rule groupActionTransition {
	from s : ThingML!Transition, r : ThingML!ReceiveMessage
	to 
	groupAction : ThingML!ActionBlock(
		actions <- if(not(s.action.oclIsUndefined())) then Sequence{sendAction,s.action} else Sequence{sendAction} endif
	),
	sendAction : ThingML!SendAction(
		message <- 	ThingML!Port.allInstances().first().receives.first(),
		port <- thisModule.resolveTemp(CyprIoT!NetworkBridge.allInstances().first(), 'port'),
		parameters <- Sequence{eventRef}
	),
	eventRef : ThingML!EventReference(
		receiveMsg <- r,
		parameter <- r.message.parameters.first()
	)
	
}

rule bridgePaths {
	from s : CyprIoT!NetworkBridge (s.bridgeSubject.oclIsTypeOf(CyprIoT!Bind) and s.bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()=thisModule.nameOfInputThing())
	to t : ThingML!ExternalConnector(
		annotations <- ThingML!ExternalConnector.allInstances().first().annotations->collect(a | thisModule.addAnnotations(a)),
		inst <- ThingML!ExternalConnector.allInstances().first().inst,
		port <- port,
		protocol <- proto
	),
	proto : ThingML!Protocol(
		name <- s.bridgeToChannel.targetedChannelInstance.typeChannel.targetedProtocol.toString().removeHash()+'1',
		annotations <- Sequence{brokerAdress,portNumber,serializer}
		
	),
	port : ThingML!RequiredPort(
		name <- 'bridge_'+s.bridgeSubject.oclAsType(CyprIoT!Bind).getInstanceThingNameFromBind()+'_port',
		sends <- ThingML!Port.allInstances().first().receives,
		optional <- true		
	),
	brokerAdress : ThingML!PlatformAnnotation(
		name <- 'mqtt_broker_address',
		value <- s.bridgeToChannel.targetedChannelInstance.typeChannel.server.toString().split(':').first()
	),
	portNumber : ThingML!PlatformAnnotation(
		name <- 'mqtt_port_number',
		value <- s.bridgeToChannel.targetedChannelInstance.typeChannel.server.toString().split(':').last()
	),
	serializer : ThingML!PlatformAnnotation(
		name <- 'serializer',
		value <- 'json' -- Create new protocol in ThingML when multiple type of serializers
	)
}

lazy rule addAnnotations {
	from s : ThingML!PlatformAnnotation
	to t : ThingML!PlatformAnnotation(
		name <- s.name.mirrorMqttPubSub(),
		value <- s.value
	)
}

lazy rule multiplePaths {
	from t : CyprIoT!Path, r : CyprIoT!RuleBridge, n : CyprIoT!Network
	to annotationMqtt : ThingML!PlatformAnnotation(
		name <- 'mqtt_publish_topic',
		value <- r.getFullPathNameBridge(n,t)
	)
}