-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module RuleTrigger;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

uses Copier;
uses Helpers;

rule copyThingMLModel {
	from s : ThingML!ThingMLModel
	to t : ThingML!ThingMLModel(
		configs <- s.configs,
		imports <- s.imports,
		protocols <- s.protocols,
		types <- s.types
	)	
}

helper context ThingML!PlatformAnnotation def : enforceDenyPublish() : Boolean =
		self.isContainerExternalConnector() and 
		thisModule.isFirstRuleOfFirstPolicyEnforcingThing() and 
		thisModule.isThingInFirstBindFromFirstEnforcedPolicy() and 
		thisModule.isFirstRuleOfFirstPolicyDeny() and
		thisModule.isObjectPubSubInFirstRule() and
		self.value = thisModule.firstNetwork().hasBinds.first().getPathName() and
		thisModule.bindAction().toString().removeHash() = '=>' and
		thisModule.isFirstRuleOfFirstPolicySend() and
		self.name='mqtt_publish_topic'
;

helper context ThingML!PlatformAnnotation def : enforceDenySubscribe() : Boolean =
		self.isContainerExternalConnector() and 
		thisModule.isFirstRuleOfFirstPolicyEnforcingThing() and 
		thisModule.isThingInFirstBindFromFirstEnforcedPolicy() and 
		thisModule.isFirstRuleOfFirstPolicyDeny() and
		thisModule.isObjectPubSubInFirstRule() and
		self.value = thisModule.firstNetwork().hasBinds.first().getPathName() and
		thisModule.bindAction().toString().removeHash() = '<=' and
		thisModule.isFirstRuleOfFirstPolicyReceive() and
		self.name='mqtt_subscribe_topic'
;

rule copyExternalConnector {
	from s : ThingML!ExternalConnector
	to t : ThingML!ExternalConnector(
		annotations <- s.annotations,
		inst <- s.inst,
		name <- s.name,
		port <- s.port,
		protocol <- s.protocol
	)
}

rule enforcePlatformAnnotation {
	from s : ThingML!PlatformAnnotation(
		thisModule.rulesTriggerContainingThingInSubject().debug('ruleComm').isEmpty()
		)
	to  t : ThingML!PlatformAnnotation(
		name <- s.name,
		value <- s.value
	)
}
