-- @atlcompiler emftvm
-- @nsURI ThingML=http://www.thingml.org/xtext/ThingML
-- @nsURI CyprIoT=http://www.atlanmod.org/CyprIoT


module Helpers;

create OUT: ThingML from TH: ThingML, CY : CyprIoT;

-- Get the name of the thing being transformed

helper def : inputThing() : String = ThingML!Thing.allInstances().first();

helper def : nameOfInputThing() : String = thisModule.inputThing().name;

helper context String def : convertArrowToSendOrReceive() : String =
	if self.startsWith('#=>')
		then 'send'
	else 
		'receive'
	endif
;

helper context String def : mirrorSendOrReceive() : String =
	if self.startsWith('send')
		then 'receive'
	else 
		'send'
	endif
;

helper context String def : mirrorMqttPubSub() : String =
	if self.startsWith('mqtt_publish_topic')
		then 'mqtt_subscribe_topic'
	else 
		'mqtt_publish_topic'
	endif
;

helper context String def : replaceDotsWithSlashInDomain() : String =
	self.replace('.', '/')
;

helper context String def : removeHash() : String =
	self.replaceAll('#', '')
;

helper context String def : transformArrowToMQTTSyntax : String =
	if self.startsWith('=>')
		then 'mqtt_publish_topic'
	else 
		'mqtt_subscribe_topic'
	endif
;

helper context CyprIoT!Bind def : getPathName() : String =
	if(self.getPathFromBind().customName.oclIsUndefined()) 
		then self.getDomainFromBind().replaceDotsWithSlashInDomain()+'/'+self.channelToBind.targetedChannelInstance.name+'/'+self.getPathFromBind().name
	else 
		self.getPathFromBind().customName
	endif
;

helper context CyprIoT!Bind def : getFullPathName(p : CyprIoT!Path) : String =
	if(p.customName.oclIsUndefined()) 
		then self.getDomainFromBind().replaceDotsWithSlashInDomain()+'/'+self.channelToBind.targetedChannelInstance.name+'/'+p.name
	else 
		p.customName
	endif
;

helper context CyprIoT!Bind def : isBindMatchesInputThing() : Boolean =
	self.getInstanceThingNameFromBind()=thisModule.nameOfInputThing()
;

helper context CyprIoT!Bind def : getInstanceThingFromBind() : CyprIoT!InstanceThing =
	self.bindsInstanceThing
;

helper context CyprIoT!Bind def : getInstanceThingNameFromBind() : String =
	self.getInstanceThingFromBind().name
;

helper context CyprIoT!Bind def : getThingFromBind() : CyprIoT!TypeThing =
	self.bindsInstanceThing.typeThing.thingToInstantiate
;

helper context CyprIoT!Bind def : getThingNameFromBind() : String =
	self.getThingFromBind().name
;

helper context CyprIoT!Bind def : getTypeChannelFromBind() : CyprIoT!ChannelToInstanciate =
	self.channelToBind.targetedChannelInstance.typeChannel
;

helper context CyprIoT!Bind def : getServerFromBind() : String =
	self.getTypeChannelFromBind().server.toString().split(':').first()
;

helper context CyprIoT!Bind def : getPortNumberFromBind() : String =
	self.getTypeChannelFromBind().server.toString().split(':').last()
;

helper context CyprIoT!Bind def : getTargetedProtocolFromBind() : String =
	self.getTypeChannelFromBind().targetedProtocol.toString().removeHash()
;

helper context CyprIoT!Bind def : getDomainFromBind() : String =
	self.refImmediateComposite().oclAsType(CyprIoT!Network).domain.name
;

helper context CyprIoT!Bind def : getAllPathsFromBind() : Sequence(CyprIoT!Path) =
	self.channelToBind.paths
;

helper context CyprIoT!Bind def : getTargetedPlatfomFromBind() : String =
	self.bindsInstanceThing.typeThing.targetedPlatform.toString().removeHash().toLower()
;

-- Rule Trigger
helper def : rulesTriggerContainingThingInSubject() : Sequence(CyprIoT!RuleTrigger) =
	thisModule.enforcedPoliciesInFirstNetwork()->collect(p | p.hasRules->select(r | r.oclIsTypeOf(CyprIoT!RuleTrigger) and r.oclAsType(CyprIoT!RuleTrigger).thingWithState.thing.name=thisModule.nameOfInputThing()))->flatten()
;

helper context CyprIoT!Policy def : getRuleTriggerFromPolicy() : Sequence(CyprIoT!RuleTrigger) =
	self.hasRules->collect(r | r.oclIsKindOf(CyprIoT!RuleTrigger))
;

-- Rule Bridge
helper context CyprIoT!Policy def : getRuleBridgeFromPolicy() : Sequence(CyprIoT!RuleBridge) =
	self.hasRules->collect(r | r.oclIsKindOf(CyprIoT!RuleBridge))
;