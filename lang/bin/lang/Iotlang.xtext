grammar lang.Iotlang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate iotlang "http://www.Iotlang.lang"

IoTLangModel returns IoTLangModel:
		//imports+=Import* 
		( "import" importURI+=STRING_LIT )*
		(types+=Type | protocols+=Protocol | configs+=Configuration)*;	

/*
Import returns ThingMLModel:
	"import" importURI=STRING_LIT
;
*/
PlatformAnnotation returns PlatformAnnotation:
	name=ANNOTATION_ID value=STRING_LIT ; 


NamedElement:
	Protocol | Function  | Message | Port | Configuration | Handler | State | StateContainer | 
	Type | Variable | Instance | InstanceGateway | AbstractConnector | EnumerationLiteral | Event |
	";" name=ID // This is never used, it is just to have the attributes in the superclass
;

AnnotatedElement:
	Protocol | Function  | Message | Port | Configuration | Handler | State | StateContainer | 
	Type | PropertyAssign | Variable | Instance | InstanceGateway | AbstractConnector | EnumerationLiteral |
	";" ( annotations+=PlatformAnnotation )* // This is never used, it is just to have the attributes in the superclass
;

Variable:
	"var" name=ID ':' typeRef=TypeRef | // This is never used, it is just to have the attributes in the superclass
	LocalVariable | Property | Parameter ;

/*****************************************************************************
 *       TYPES / ENUMERATIONS                                                *
 *****************************************************************************/

TypeRef returns TypeRef:
	type=[Type|ID] (^isArray?='[' (cardinality=Expression)? ']')?
;

Type:
	PrimitiveType | ObjectType | Enumeration | Thing | Gateway;

PrimitiveType returns PrimitiveType:
	'datatype' name=ID '<' ByteSize=INT '>'	( annotations+=PlatformAnnotation )* (';')?;
	
ObjectType returns ObjectType:
	'object' name=ID ( annotations+=PlatformAnnotation )* (';')?;

Enumeration returns Enumeration:
	'enumeration' name=ID ( annotations+=PlatformAnnotation )* '{' (literals+=EnumerationLiteral)* '}';

EnumerationLiteral returns EnumerationLiteral:
	name=ID ( annotations+=PlatformAnnotation )* ;
	
	
/*****************************************************************************
 *       THING / COMPONENT MODEL                                             *
 *****************************************************************************/

Thing returns Thing:
	'thing' (^fragment?='fragment')? name=ID ('includes' includes+=[Thing|ID] ( "," includes+=[Thing|ID])*)? 
	( annotations+=PlatformAnnotation )*'{'
		(messages+=Message | ports += Port | properties+=Property | functions+=Function | assign+=PropertyAssign | behaviour+=StateMachine /* | streams+=Stream*/)* 
	'}';

PropertyAssign returns PropertyAssign:
	'set' property=[Property|ID] ('[' index+=Expression ']')* '=' init=Expression ( annotations+=PlatformAnnotation )*;

Protocol returns Protocol:
	'protocol' name=ID ( annotations+=PlatformAnnotation )* ';';
	
Function returns Function:
	'function' name=ID '(' (parameters+=Parameter ( "," parameters+=Parameter)* )? ')' (':' typeRef=TypeRef)? 
							( annotations+=PlatformAnnotation )* body=Action | AbstractFunction
;

AbstractFunction returns Function:
	abstract?='abstract' 'function' name=ID '(' (parameters+=Parameter ( "," parameters+=Parameter)* )? ')' (':' typeRef=TypeRef)? 
							( annotations+=PlatformAnnotation )* 
;

Property returns Property:
	(readonly?='readonly')? 'property' name=ID ':' typeRef=TypeRef ( '=' init=Expression)?
	( annotations+=PlatformAnnotation )*
;

Message returns Message:
	'message' name=ID '(' ( parameters+=Parameter ( "," parameters+=Parameter)* )? ')'
	( annotations+=PlatformAnnotation )* (';')?;
	
Parameter returns Parameter:
	name=ID ':' typeRef=TypeRef ( annotations+=PlatformAnnotation )*
;

Port returns Port:
	RequiredPort | ProvidedPort | InternalPort;
	
	
RequiredPort returns RequiredPort:
	(optional?='optional')? 'required' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[Message|ID] ( "," sends+=[Message|ID])* ) | 
		('receives' receives+=[Message|ID] ( "," receives+=[Message|ID])* ))*
	'}';

ProvidedPort returns ProvidedPort:
	'provided' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[Message|ID] ( "," sends+=[Message|ID])* ) | 
		('receives' receives+=[Message|ID] ( "," receives+=[Message|ID])* ))*
	'}';

InternalPort returns InternalPort:
	'internal' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[Message|ID] ( "," sends+=[Message|ID])* ) | 
		('receives' receives+=[Message|ID] ( "," receives+=[Message|ID])* ))*
	'}';


/*****************************************************************************
 *       STATE MECHINES                                                      *
 *****************************************************************************/

State returns State:
	StateMachine | FinalState | CompositeState |
	'state' name=ID ( annotations+=PlatformAnnotation )* '{'
		(properties+=Property)*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		(internal+=InternalTransition | outgoing+=Transition)*
	'}';

Handler:
	Transition | InternalTransition
;

Transition returns Transition:
	'transition' (name=ID)? '->' target=[State|ID] 
	( annotations+=PlatformAnnotation )*
	('event' event+=Event)*
	('guard' guard=Expression)?
	('action' action=Action)?;

InternalTransition returns InternalTransition:
	{InternalTransition}
	'internal' (name=ID)?
	( annotations+=PlatformAnnotation )*
	('event' event+=Event)*
	('guard' guard=Expression)?
	('action' action=Action)?;


CompositeState returns CompositeState:
	'composite' 'state' name=ID 'init' initial=[State|ID] ('keeps' history?='history')?	( annotations+=PlatformAnnotation )* '{'
		(properties+=Property)*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		(substate+=State | internal+=InternalTransition | outgoing+=Transition)*
		(region+=Region | session+=Session)*
	'}';

StateMachine returns CompositeState: // Actually only another syntax for a composite state
	'statechart' (name=ID)? 'init' initial=[State|ID] ('keeps' history?='history')?	( annotations+=PlatformAnnotation )* '{'
		(properties+=Property)*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		(substate+=State | internal+=InternalTransition)*
		(region+=Region | session+=Session)*
	'}';

Session returns Session:
	'session' name=ID ('<' maxInstances=(IntegerLiteral | PropertyReference) '>')? 'init' initial=[State|ID] ( annotations+=PlatformAnnotation )* '{'
		(substate+=State)*
	'}';

Region returns Region:
	'region' (name=ID)? 'init' initial=[State|ID] ('keeps' history?='history')?	( annotations+=PlatformAnnotation )* '{'
		(substate+=State)*
	'}';

FinalState returns FinalState:
	'final' 'state' name=ID ( annotations+=PlatformAnnotation )* '{' ('on' 'entry' entry=Action)? '}'
;

StateContainer:
	CompositeState | Region | Session |
	'keeps' initial=[State|ID] ('keeps' history?='history')?	 '{' // This is never used, it is just to have the attributes in the superclass
		(substate+=State)*
	'}'
;

/*****************************************************************************
 *       EVENTS                                                             *
 *****************************************************************************/
Event:
	ReceiveMessage;

ReceiveMessage returns ReceiveMessage:
	(name=ID ":")? port=[Port|ID]'?'message=[Message|ID];


/*****************************************************************************
 *       ACTIONS                                                             *
 *****************************************************************************/
 
Action returns Action:
	ActionBlock | ExternStatement | SendAction | VariableAssignment | Increment | Decrement | LoopAction |
	ConditionalAction | ReturnAction | PrintAction | ErrorAction | StartSession | FunctionCallStatement | LocalVariable;


ActionBlock returns ActionBlock:
	{ActionBlock}
	'do' (actions+=Action)* 'end';

ExternStatement returns ExternStatement:
	statement = STRING_EXT ('&' segments+=Expression)*;
	
LocalVariable returns LocalVariable:
	(readonly?='readonly')? 'var' name=ID ':'  typeRef=TypeRef ( '=' init=Expression)? ( annotations+=PlatformAnnotation )*
;

SendAction returns SendAction:
	port=[Port|ID] '!' message=[Message|ID] '(' (parameters+=Expression ( "," parameters+=Expression)*)? ')';

VariableAssignment returns VariableAssignment:
	property=[Variable|ID] ('[' index+=Expression ']')* '=' expression=Expression;


Increment returns Increment:
	var=[Variable|ID] '++';

Decrement returns Decrement:
	var=[Variable|ID] '--';

LoopAction returns LoopAction:
	'while' '(' condition=Expression ')' action=Action;

ConditionalAction returns ConditionalAction:
	'if' '(' condition=Expression ')' action=Action ('else' elseAction=Action)?;

ReturnAction returns ReturnAction:
	'return' exp=Expression;

PrintAction returns PrintAction:
	'print' msg=Expression;

ErrorAction returns ErrorAction:
	'error' msg=Expression;

StartSession returns StartSession:
	'fork' session=[Session|ID] ;


FunctionCallStatement returns FunctionCallStatement:
	function=[Function|ID] '(' (parameters+=Expression ( "," parameters+=Expression)*)? ')';


/*****************************************************************************
 *       EXPRESSIONS                                                         *
 *****************************************************************************/

	//ExternExpression | EnumLiteralRef | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral | NotExpression | UnaryMinus | 
	//PlusExpression | MinusExpression | TimesExpression | DivExpression | ModExpression | EqualsExpression | NotEqualsExpression | GreaterExpression | 
	//LowerExpression | GreaterOrEqualExpression | LowerOrEqualExpression | AndExpression | OrExpression | PropertyReference | ArrayIndex | 
	//ExpressionGroup | FunctionCallExpression | MessageParameter | Reference;


Expression: CastExpression;

CastExpression returns Expression:
	OrExpression ({CastExpression.term=current} "as" type=[Type|ID] (^isArray?='['']')?)?
;

OrExpression returns Expression:
	AndExpression ({OrExpression.lhs=current} "or" rhs=AndExpression)*
;

AndExpression returns Expression:
	Equality ({AndExpression.lhs=current} "and" rhs=Equality)*
;

Equality returns Expression:
	Comparaison (
	( {EqualsExpression.lhs=current} "==" rhs=Comparaison ) |
	( {NotEqualsExpression.lhs=current} "!=" rhs=Comparaison )
	)*	
;

Comparaison returns Expression:
	Addition (
	( {GreaterExpression.lhs=current} ">" rhs=Addition ) |
	( {LowerExpression.lhs=current} "<" rhs=Addition ) |
	( {GreaterOrEqualExpression.lhs=current} ">=" rhs=Addition ) |
	( {LowerOrEqualExpression.lhs=current} "<=" rhs=Addition )
	)*
;

Addition returns Expression:
	Multiplication (
	( {PlusExpression.lhs=current} "+" rhs=Multiplication ) |
	( {MinusExpression.lhs=current} "-" rhs=Multiplication )
	)*	
;

Multiplication returns Expression:
	Modulo (
	( {TimesExpression.lhs=current} "*" rhs=Modulo ) |
	( {DivExpression.lhs=current} "/" rhs=Modulo )
	)*	
;

Modulo returns Expression:
	Primary ({ModExpression.lhs=current} "%" rhs=Expression)?
;


Primary returns Expression:
	{ExpressionGroup} '(' term=Expression ')' |
	{NotExpression} "not" term=Primary |
	{UnaryMinus} '-' term=Primary 
	| ArrayIndexPostfix
;


ArrayIndexPostfix returns Expression:
	AtomicExpression ( {ArrayIndex.array=current} '[' index=Expression ']')?
;

AtomicExpression returns Expression:
	ExternExpression | EnumLiteralRef | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral | PropertyReference | FunctionCallExpression 
	 | EventReference 
;

ExternExpression returns ExternExpression:
	expression = STRING_EXT ('&' segments+=Expression)*;
	
	
EnumLiteralRef returns EnumLiteralRef:
	^enum=[Enumeration|ID] ':' literal=[EnumerationLiteral|ID];

IntegerLiteral returns IntegerLiteral:
	intValue=INT;

BooleanLiteral returns BooleanLiteral:
	(boolValue?='true') | {BooleanLiteral} 'false'
	;

StringLiteral returns StringLiteral:
	stringValue=STRING_LIT;

DoubleLiteral returns DoubleLiteral:
	doubleValue = FLOAT;

PropertyReference returns PropertyReference:
	property=[Variable|ID]
;

EventReference returns EventReference:
	receiveMsg=[Event|ID] "." parameter=[Parameter|ID]
;

FunctionCallExpression returns FunctionCallExpression:
	function=[Function|ID]'('
		( parameters+=Expression ( "," parameters+=Expression )* )?
	')';

/*****************************************************************************
 *       GATEWAY / COMPONENT MODEL                                             *
 *****************************************************************************/
 
Gateway returns Gateway:
	'gateway' name=ID ( annotations+=PlatformAnnotation )*'{'
		(buses+=Bus)* 
'}';
	
Bus returns Bus :
	'bus' name=ID '{'
		(channels +=Channel)*
	
'}'
;
Channel returns Channel :
	'channel' name=ID '=' channelId = STRING_LIT
;
//Component returns Component:
//	'component' name=ID '(' ( policies+=Policy ( "," policies+=Policy)* )? ')'
//	( annotations+=PlatformAnnotation )* (';')?;
//	
//Policy returns Policy:
//	name=ID ':' (rulesallow+=RuleAllow |
//		rulesDeny+=RuleDeny)*
//	( annotations+=PlatformAnnotation )*
//;
//RuleAllow returns RuleAllow:
//	name=ID (subject=[Thing|ID] 'allow' resource+=[Thing|ID])
//;
//
//RuleDeny returns RuleDeny:
//	name=ID (subject=[Thing|ID] 'deny' resource+=[Thing|ID])
//;

/*****************************************************************************
 *       CONFIGURATIONS                                                      *
 *****************************************************************************/

Configuration returns Configuration:
	'configuration' name=ID ( annotations+=PlatformAnnotation )* '{'
	(domain+=Domain | channelings+=Channeling|instancegateways+=InstanceGateway | instances+=Instance | connectors+=AbstractConnector | propassigns+=ConfigPropertyAssign)*
	'}';

Domain returns Domain:
	'domain' name=STRING_LIT
;
Instance returns Instance:
	'instance' name=ID ':' type=[Thing|ID] ( annotations+=PlatformAnnotation )*;

InstanceGateway returns InstanceGateway:
	'gate' name=ID ':' typeGate=[Gateway] ( annotations+=PlatformAnnotation )*;
	
ConfigPropertyAssign returns ConfigPropertyAssign:
	'set' instance=[Instance|ID] '.' property=[Property|ID] ('[' index+=Expression ']')* '=' init=Expression ( annotations+=PlatformAnnotation )*;


AbstractConnector:
	Connector | ExternalConnector;
	
Connector returns Connector:
	'connector'	(name=ID)? cli=[Instance|ID] '.' required=[RequiredPort|ID] '=>' srv=[Instance|ID] '.' provided=[ProvidedPort|ID] ( annotations+=PlatformAnnotation )*;

ExternalConnector returns ExternalConnector:
	'connector'	(name=ID)? inst=[Instance|ID] '.' port=[Port|ID] 'over' protocol=[Protocol|ID] ( annotations+=PlatformAnnotation )*;

Channeling returns Channeling:
	'bind'	(name=ID)? Thinginst=[Instance|ID] '.' port=[Port|ID] direction=('=>' |'<=>'|'<=') srv=[InstanceGateway|ID] '.' buses=[Bus|ID] '{' channels+=[Channel|ID] (( "," channels+=[Channel|ID])*)?'}' /*'over ' protocol=[Protocol|ID]*/ ( annotations+=PlatformAnnotation )*;


/* 
InstanceRef returns InstanceRef:
	instance=[Instance|ID];
*/

/*****************************************************************************
 *       TERMINALS                                                           *
 *****************************************************************************/

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt: ('0'..'9')+;


terminal FLOAT returns ecore::EDouble :
('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| '.' ('0'..'9')+ (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| ('0'..'9')+ ('e'|'E') ('+' | '-')? ('0'..'9')+;

terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


terminal STRING_EXT:  
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;