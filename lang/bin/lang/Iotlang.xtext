grammar lang.Iotlang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate iotlang "http://www.Iotlang.lang"

IoTLangModel returns IoTLangModel:
		(things+=Thing |policies+=Policy| messages+=Message | channels+=Channel | protocols += Protocol | configs+=NetworkConfiguration)*;
		
/* Terminals  */

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

PlatformAnnotation returns PlatformAnnotation:
	name=ANNOTATION_ID value=STRING_LIT ;
	
/* Main types  */

Thing: // example gateway, arduino, android  
	'thing' name=ID
	( annotations+=PlatformAnnotation )*'{'
		 (ports+=Port)
	'}';

Channel: // mqtt, kafka, real simple bus,
	(pubSub+= PubSub| pointToPoint +=PointToPoint)
;
PubSub:
	'channel:pubsub' name=ID '{'
		(hasTopics +=Topic)*
		'}'
;

PointToPoint:
	'channel:ptp' name=ID '{'
		
		'}'
;
Policy: // mqtt, kafka, real simple bus,
	'policy' name=ID '{'
		(hasRules +=Rule)*
	
'}'
;
Port :
	'port' name=ID
;
Protocol :
	'protocol' name=ID
;

Message :
	'message' name=ID
;
Topic:
	'topic'  name=ID /*type=('?' |'!')*/ '(' acceptedMessages=[Message] ')'
;

Rule:
	'rule' (name=ID)? (subject=[Thing]) permission=('allow' |'deny') ':' action=('send'|'receive') (object=[Thing](( "." ports+=[Port])*)?| 'message:' objectMessage=[Message])
;


/* Configuration : Configure the WSN topology */ 

// Generate the topic description

Domain:
	'domain' name=STRING_LIT
;
InstanceThing:
	'instanceThing' name=ID (( '[' number+=INT ']')*)?':' (typeThing=[Thing]) ( annotations+=PlatformAnnotation )*;

//instanceGateway:
//	'instanceGateway' name=ID (( '[' number+=INT ']')*)?':' (type=[Thing]) ( annotations+=PlatformAnnotation )*;
InstancePubSub:
	'instancePubSub' name=ID (( '[' number+=INT ']')*)? ':' (typeChannel=[PubSub]) 'over' overProtocol=[Protocol]( annotations+=PlatformAnnotation )*
;
InstancePtP:
	'instancePTP' name=ID (( '[' number+=INT ']')*)? ':' (typeChannel=[PointToPoint]) 'over' overProtocol=[Protocol]( annotations+=PlatformAnnotation )*
;
InstanceChannel:
	(instancesPubSub+=InstancePubSub | instancesPtp+=InstancePtP	)
;
InstancePolicy:
	'instancePolicy' name=ID ':' (typePolicy=[Policy]) ( annotations+=PlatformAnnotation )*;

NetworkConfiguration:
	'networkConfiguration' name=ID ( annotations+=PlatformAnnotation )* '{'
	(connects+=Connect| domain+=Domain | binds+=Bind| thingInstances+=InstanceThing | channelInstances+=InstanceChannel | 'enforce' enforces+=[InstancePolicy] | instancePoliciy+=InstancePolicy)*
	
	'}';
Bind:
	'bind'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<=') pubSubInstance=[InstancePubSub]'{' topics+=[Topic] (( "," topics+=[Topic])*)?'}' ( annotations+=PlatformAnnotation )*;

Connect:
	'connect'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<=') ptpInstance=[InstancePtP] ( annotations+=PlatformAnnotation )*;
	