/*
 * generated by Xtext 2.13.0
 */
package lang.scoping

import lang.iotlang.IotlangPackage
import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.ENamedElement
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import lang.util.Helpers
import lang.iotlang.Port
import lang.iotlang.Thing
import lang.iotlang.Message
import lang.iotlang.Parameter
import lang.iotlang.Rule
import lang.iotlang.Role

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class IotlangScopeProvider extends AbstractIotlangScopeProvider {
	private val iotlangInstance = IotlangPackage.eINSTANCE;
	protected ArrayList EMPTY = new ArrayList();
	
	override getScope(EObject context, EReference reference) {
		
		if (reference==iotlangInstance.rule_Subject) {
			return Scopes.scopeFor( Helpers.allThings(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.rule_Object) {
			return Scopes.scopeFor( Helpers.allThings(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.thing_Roles) {
			return Scopes.scopeFor( Helpers.allTRoles(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.instanceThing_TypeThing) {
			return Scopes.scopeFor( Helpers.allThings(Helpers.findContainingModel(context)) );
		}/*else if (reference == iotlangInstance.instancePolicy_TypePolicy) {
			return Scopes.scopeFor( Helpers.allPolicies(Helpers.findContainingModel(context)) );
		}*/else if (reference == iotlangInstance.networkConfiguration_Enforces) {
			return Scopes.scopeFor( Helpers.allPolicies(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.bind_ThingInstance) {
			return Scopes.scopeFor( Helpers.allThinginstances(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.bind_PubSubInstance) {
			return Scopes.scopeFor(Helpers.allPubSubinstances(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.bind_Topics) {
			return Scopes.scopeFor( Helpers.allTopics(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.topic_Belongs) {
			return Scopes.scopeFor( Helpers.allTopics(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.bind_Topics) {
			return Scopes.scopeFor( Helpers.allTopics(Helpers.findContainingModel(context)) );
		}/*else if (reference == iotlangInstance.topic_AcceptedMessages) {
			return Scopes.scopeFor( Helpers.allMessages(Helpers.findContainingModel(context)) );
		}*/else if (reference == iotlangInstance.bind_PubSubInstance) {
			return Scopes.scopeFor(Helpers.allPubSubinstances(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.instancePubSub_TypeChannel) {
			return Scopes.scopeFor( Helpers.allPusSub(Helpers.findContainingModel(context)));
		}/*else if (reference == iotlangInstance.instancePubSub_OverProtocol) {
			return Scopes.scopeFor( Helpers.allProtocol(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.instanceReqRep_TypeChannel) {
			return Scopes.scopeFor( Helpers.allPTP(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.instanceReqRep_OverProtocol) {
			return Scopes.scopeFor( Helpers.allProtocol(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.connect_ThingInstance) {
			return Scopes.scopeFor( Helpers.allConfigs(Helpers.findContainingModel(context)).get(0).thingInstances );
		}else if (reference == iotlangInstance.connect_ReqRepInstance) {
			return Scopes.scopeFor( Helpers.allPtpinstances(Helpers.findContainingModel(context)));
		}*/else if (reference == iotlangInstance.instanceThing_Owner) {
			return Scopes.scopeFor( Helpers.allUsers(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.port_Messages) {
			return Scopes.scopeFor( Helpers.allMessages(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.rule_ObjectMess) {
			return Scopes.scopeFor( Helpers.allMessages(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.role_ObjectMess) {
			return Scopes.scopeFor( Helpers.allMessages(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.rule_ObjectTopic) {
			return Scopes.scopeFor( Helpers.allTopics(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.role_ObjectTopic) {
			return Scopes.scopeFor( Helpers.allTopics(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.rule_SubjectPort) {
			return Scopes.scopeFor( Helpers.allPorts(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.bind_SubjectPort) {
			return Scopes.scopeFor( Helpers.allPorts(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.rule_TypeMess) {
			return scopeForConnector_ObjectMess(context as Rule);
		}else if (reference == iotlangInstance.role_TypeMess) {
			return scopeForConnector_ObjectMess(context as Role);
		}else if (reference == iotlangInstance.rule_ObjectPort) {
			return Scopes.scopeFor( Helpers.allPorts(Helpers.findContainingModel(context)));
		}else if (reference == iotlangInstance.role_ObjectPort) {
			return Scopes.scopeFor( Helpers.allPorts(Helpers.findContainingModel(context)));
		}/*else if (reference == iotlangInstance.rule_ObjectMessage) {
			return Scopes.scopeFor( Helpers.allMessages(Helpers.findContainingModel(context)) );
		}else if (reference == iotlangInstance.message_Datatypes) {
			return Scopes.scopeFor( Helpers.allDatatypes(Helpers.findContainingModel(context)) );
		}*/else {
			System.err.println("INFO: Resolving reference : " + reference.name + " in Class " + (reference.eContainer as ENamedElement).getName);
		}
		return Scopes.scopeFor( EMPTY );
	}
	
	def protected IScope scopeForConnector_ObjectMess(Rule context) {
		Scopes.scopeFor( Helpers.allParameters(context.objectMess) ); 
	}
	def protected IScope scopeForConnector_ObjectMess(Role context) {
		Scopes.scopeFor( Helpers.allParameters(context.objectMess) ); 
	}
}
