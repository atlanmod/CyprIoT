grammar lang.Iotlang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


generate iotlang "http://www.Iotlang.lang"

IoTLangModel returns IoTLangModel:
		(datatypes+=Datatype | things+=Thing |policies+=Policy| messages+=Message | channels+=Channel | protocols += Protocol | networkConfigs+=NetworkConfiguration | configs+=Configuration)*;
		
/* Terminals  */

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
terminal STRING_LISH: 
			'#' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'#') )* '#';
terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

TargetAnnotation:
	name=ANNOTATION_ID value=STRING_LIT ;
	
/* Main types  */

Thing: // example gateway, arduino, android  
	'thing' name=ID
	( annotations+=TargetAnnotation )*'{'
		 ('code=' code+=STRING_LISH | ports+=Port)*
'}';

Channel: // mqtt, kafka, real simple bus,
	(pubSub+= PubSub| reqRep +=ReqRep)
;
PubSub:
	'channel:pubsub' name=ID '{'
		(hasTopics +=Topic)*
		'}'
;

ReqRep:
	'channel:reqrep' name=ID '{'
		
		'}'
;
Policy: // mqtt, kafka, real simple bus,
	'policy' name=ID '{'
		(hasRules +=Rule)*
'}'
;
Port :
	'port' name=ID
;
Datatype:
	'datatype' name=ID '<' ByteSize=INT '>'	( annotations+=TargetAnnotation )* (';')?
;
Protocol :
	'protocol' name=ID
;

Message :
	'message' name=ID '('datatypes+=[Datatype] (( "," datatypes+=[Datatype])*)?')'
;
Topic:
	'topic'  name=ID /*type=('?' |'!')*/ '(' acceptedMessages=[Message] ')'
;

Rule:
	'rule' (name=ID)? (subject=[Thing]) permission=('allow' |'deny') ':' action=('send'|'receive') (object=[Thing](( "." ports+=[Port])*)?| 'message:' objectMessage=[Message])
;

/* Configuration : Configure the WSN topology */ 

// Generate the topic description

Domain:
	'domain' name=STRING_LIT
;
InstanceThing:
	'instanceThing' name=ID (( '[' number+=INT ']')*)?':' (typeThing=[Thing])  'id' thingId=STRING_LIT 'target' platform=('tinyos'|'contiki'|'riot'|'cposix'|'java'|'python'|'javascript') ( annotations+=TargetAnnotation )*;

//instanceGateway:
//	'instanceGateway' name=ID (( '[' number+=INT ']')*)?':' (type=[Thing]) ( annotations+=PlatformAnnotation )*;
InstancePubSub:
	'instancePubSub' name=ID ':' (typeChannel=[PubSub]) 'target' platform=STRING_LIT 'over' protocol=('mqtt' |'coap'|'amqp'|'stomp'/*| 'websocket' | 'upnp' | 'dds' */) ':'physical=('zigbee'|'tcp'|'udp'|'serial')( annotations+=TargetAnnotation )*
;
InstanceReqRep:
	'instanceReqRep' name=ID ':' (typeChannel=[ReqRep]) 'target' platform=STRING_LIT 'over' protocol=('coap'|'http' /*| 'websocket' | 'upnp' | 'dds' */)':' physical=('udp'|'tcp'|'sms'|'serial')( annotations+=TargetAnnotation )*
;
InstanceChannel:
	(instancesPubSub+=InstancePubSub | instancesReqRep+=InstanceReqRep	)
;
/*InstancePolicy:
	'instancePolicy' name=ID ':' (typePolicy=[Policy]) ( annotations+=PlatformAnnotation )*;*/
Configuration:
	'configuration' name=ID '{'
		//instanceThing+=InstanceThing
		//portsConfig+=PortConfiguration
	'}'
;
PortConfiguration:
	'portConfig' name=ID '{'
	
	'}'
;
NetworkConfiguration:
	'networkConfiguration' name=ID ( annotations+=TargetAnnotation )* '{'
	(connects+=Connect| domain+=Domain | binds+=Bind| thingInstances+=InstanceThing | channelInstances+=InstanceChannel | 'enforce' enforces+=[Policy] /*| instancePoliciy+=InstancePolicy */)*
	
	'}';
Bind:
	'bind'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<=') pubSubInstance=[InstancePubSub]'{' topics+=[Topic] (( "," topics+=[Topic])*)?'}' ( annotations+=TargetAnnotation )*;

Connect:
	'connect'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<=') reqRepInstance=[InstanceReqRep] ( annotations+=TargetAnnotation )*;
	