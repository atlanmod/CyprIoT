grammar lang.Iotlang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


generate iotlang "http://www.Iotlang.lang"

IoTLangModel returns IoTLangModel:
		(/*datatypes+=Datatype | roles+=Role|*/ messages+=Message | things+=Thing |policies+=Policy /*| messages+=Message  */| channels+=Channel | protocols += Protocol | networkConfigs+=NetworkConfiguration | configs+=Configuration)*;
		
/* Terminals  */

terminal INT returns ecore::EInt: ('0'..'9')+;

//terminal DOM: country=('a'..'z')'.'('a'..'z')'.'('a'..'z')'.'('a'..'z');


terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

TargetAnnotation:
	name=ANNOTATION_ID value=STRING_LIT ;
	
/* Main types  */

Thing: // example gateway, arduino, android  
	'import' name=ID code+=STRING_LIT '{'
	(ports+=Port (( "," ports+=Port)*)?) 
	('assign' roles+=[Role] (( "," roles+=[Role])*)? ( override+='priority' ('('weight=INT')')? )?)?
	'}'
;

Channel: // mqtt, kafka, real simple bus,
	(pubSub+= PubSub| reqRep +=ReqRep)
;

PubSub:
	'channel:pubsub' name=ID '{'
		(hasTopics +=Topic)*
		'}'
;

ReqRep:
	'channel:reqrep' name=ID '{'
		
		'}'
;

Policy: // mqtt, kafka, real simple bus,
	'policy' name=ID '{'
		(hasRules +=Rule | hasRoles +=Role)*
		/*(hasRoles +=Role)**/ // last rule will override the past, otherwise use keyword 'override'
'}'
;
Port :
	'expose' name=ID '.' messages+=[Message]
;
Message :
	'message' name=ID '(' ( parameters+=Parameter ( "," parameters+=Parameter)* )? ')'
;
Parameter returns Parameter:
	name=ID ':' typeRef=ID 
;
Protocol :
	'protocol' name=ID
;

Topic:
	'topic'  name=ID /*type=('?' |'!') '(' acceptedMessages=[Message] ')' // add capacity of subscribers*/
;

Rule:
	'rule' (name=ID)? (subject=[Thing]( "." subjectPort+=[Port])*) permission=('allow' |'deny') ':' action=('send'|'receive') ('thing:' object=[Thing](( "." objectPort+=[Port])*)? | 'message:' objectMess=[Message]'.' typeMess=[Parameter|ID] ('=' stringMessage+=STRING_LIT | ('<' lowerInt=INT ('and' '>' higherInt=INT)?)) | 'topic:' objectTopic=[Topic]((','objectTopic=[Topic])*)?) ( override+='priority' ('('weight=INT')')? )?
;
Role:
	'role' (name=ID)? permission=('allow' |'deny') ':' action=('send'|'receive') ('thing:' object=[Thing](( "." objectPort+=[Port])*)? | 'message:' objectMess=[Message]'.' typeMess=[Parameter|ID] ('=' stringMessage+=STRING_LIT | ('>' lowerInt=INT ('and' '<' higherInt=INT)?)) | 'topic:' objectTopic=[Topic]((','objectTopic=[Topic])*)?) ( override+='priority' ('('weight=INT')')? )?
;
/* Configuration : Configure the WSN topology */ 

// Generate the topic description

Domain:
	'domain' name=STRING_LIT
;
InstanceThing:
	'instanceThing' name=ID /*(( '[' number+=INT ']')*)?*/ ':' (typeThing=[Thing])  'id' thingId=STRING_LIT 'password' thingPassword=STRING_LIT 'target' platform=('arduino'|'contiki'|'riot'|'cposix'|'java'|'python'|'javascript') ( annotations+=TargetAnnotation )*;

//instanceGateway:
//	'instanceGateway' name=ID (( '[' number+=INT ']')*)?':' (type=[Thing]) ( annotations+=PlatformAnnotation )*;
InstancePubSub:
	'instancePubSub' name=ID ':' (typeChannel=[PubSub]) 'target' platform=STRING_LIT 'host' host=STRING_LIT 'port' port=STRING_LIT 'over' protocol=('mqtt' |'coap'|'amqp'|'stomp'/*| 'websocket' | 'upnp' | 'dds' */) ':'physical=('zigbee'|'tcp'|'udp'|'serial')( annotations+=TargetAnnotation )*
;
InstanceReqRep:
	'instanceReqRep' name=ID ':' (typeChannel=[ReqRep]) 'target' platform=STRING_LIT 'host' host=STRING_LIT 'port' port=STRING_LIT 'over' protocol=('coap'|'http' /*| 'websocket' | 'upnp' | 'dds' */)':' physical=('udp'|'tcp'|'sms'|'serial')( annotations+=TargetAnnotation )*
;
InstanceChannel:
	(instancesPubSub+=InstancePubSub | instancesReqRep+=InstanceReqRep	)
;
/*InstancePolicy:
	'instancePolicy' name=ID ':' (typePolicy=[Policy]) ( annotations+=PlatformAnnotation )*;*/
Configuration:
	'configuration' name=ID '{'
		//instanceThing+=InstanceThing
		//portsConfig+=PortConfiguration
	'}'
;

NetworkConfiguration:
	'networkConfiguration' name=ID ( annotations+=TargetAnnotation )* '{'
	(connects+=Connect| domain+=Domain | binds+=Bind| thingInstances+=InstanceThing | channelInstances+=InstanceChannel | 'enforce' enforces+=[Policy] ((',' enforces+=[Policy])*)?  'format' format=('sql' |'txt'|'redis'|'http')/*| instancePoliciy+=InstancePolicy */)*
	
	'}'
;

Bind:
	'bind'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<='|'=') pubSubInstance=[InstancePubSub]'{' topics+=[Topic] (( "," topics+=[Topic])*)?'}' ( annotations+=TargetAnnotation )*
;

Connect:
	'connect'	(name=ID)? thingInstance=[InstanceThing] direction=('=>' |'<=>'|'<=') reqRepInstance=[InstanceReqRep] ( annotations+=TargetAnnotation )*
;