grammar lang.Iotlang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


generate iotlang "http://www.Iotlang.lang"

IoTLangModel returns IoTLangModel:
		(/*datatypes+=Datatype | roles+=Role|*/ declareMessages+=Message | importThings+=Thing | policies+=Policy /*| messages+=Message  */| channels+=Channel /* | protocols += Protocol */| networkConfigs+=NetworkConfiguration /* | configs+=Configuration */| users+=User)*;
		

@Override 
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


Thing:
	'import' name=ID importPath=STRING_LIT '{'
	('declare' hasPort+=Port ( "," hasPort+=Port)*)?
	('assign' isAssignedRole+=[Role] ( "," isAssignedRole+=[Role])*)? /*( override+='priority' ('('weight=INT')')? )?*/
	'}'
;

Channel:
	isOfTypePubSub= PubSub
;

PubSub:
	'channel:pubsub' name=ID '{'
		(hasTopics +=Topic)*
		'}'
;

User :
	'user' name=ID ('password' password=STRING_LIT)?
;

Policy:
	'policy' name=ID '{'
		(hasRules +=Rule | hasRoles +=Role)*
'}'
;

Port :
	name=ID '.' messages+=[Message]
;

Message :
	'message' name=ID '(' ( parameters+=Parameter ( "," parameters+=Parameter)* )? ')'
;

Parameter returns Parameter:
	name=ID ':' typeRef=ID 
;

Topic:
	'topic'  name=ID  ('subtopicOf' subtopicOf+=[Topic])?
;

Permission :
	permission=('allow' |'deny') ':' action=('send'|'receive') ('thing:' object=[Thing] ( "." objectPort+=[Port])* | 'message:' objectMess=[Message]'.' typeMess=[Parameter|ID] ('=' stringMessage+=STRING_LIT | ('<' lowerInt=INT ('and' objectMess2=[Message]'.' typeMess2=[Parameter|ID] '>' higherInt=INT)?)) | 'topic:' objectTopic+=[Topic](','objectTopic+=[Topic])*)
;

Rule:
	'rule' (name=ID)? subject=[Thing]( "." subjectPort=[Port])? permission=Permission
;
Role:
	'role' (name=ID)? permission=Permission
;

Domain:
	'domain' name=STRING_LIT
;

Instance :
	'instance' InstanceThing | 'instance' InstanceChannel
;

InstanceThing:
	name=ID ':' (typeThing=[Thing])  'owner' owner=[User] 'target' platform=('arduino'|'contiki'|'riot'|'cposix'|'java'|'python'|'javascript');
	
InstancePubSub:
	name=ID ':' (typeChannel=[PubSub]) 'target' platform=STRING_LIT 'host' host=STRING_LIT 'port' port=STRING_LIT 'over' protocol=('mqtt' |'coap'|'amqp'|'stomp'/*| 'websocket' | 'upnp' | 'dds' */) ':'physical=('zigbee'|'tcp'|'udp'|'serial')
;

InstanceChannel:
	instancesPubSub=InstancePubSub
;

NetworkConfiguration:
	'networkConfiguration' name=ID '{'
	(domain+=Domain | binds+=Bind| instances+=Instance | 'enforce' enforces+=[Policy] (',' enforces+=[Policy])*  'format' format=('sql' |'txt'|'redis'|'http')/*| instancePoliciy+=InstancePolicy */)*
	
	'}'
;

Bind:
	'bind'	(name=ID)? thingInstance=[InstanceThing]"." subjectPort+=[Port] readOrWrite=('=>' |'<=>'|'<='|'=') pubSubInstance=[InstancePubSub]'{' topics+=[Topic] ( "," topics+=[Topic])*'}'
;