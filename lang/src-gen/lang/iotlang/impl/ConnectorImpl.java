/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.impl;

import lang.iotlang.Connector;
import lang.iotlang.Instance;
import lang.iotlang.IotlangPackage;
import lang.iotlang.ProvidedPort;
import lang.iotlang.RequiredPort;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lang.iotlang.impl.ConnectorImpl#getCli <em>Cli</em>}</li>
 *   <li>{@link lang.iotlang.impl.ConnectorImpl#getRequired <em>Required</em>}</li>
 *   <li>{@link lang.iotlang.impl.ConnectorImpl#getSrv <em>Srv</em>}</li>
 *   <li>{@link lang.iotlang.impl.ConnectorImpl#getProvided <em>Provided</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectorImpl extends AbstractConnectorImpl implements Connector
{
  /**
   * The cached value of the '{@link #getCli() <em>Cli</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCli()
   * @generated
   * @ordered
   */
  protected Instance cli;

  /**
   * The cached value of the '{@link #getRequired() <em>Required</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequired()
   * @generated
   * @ordered
   */
  protected RequiredPort required;

  /**
   * The cached value of the '{@link #getSrv() <em>Srv</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrv()
   * @generated
   * @ordered
   */
  protected Instance srv;

  /**
   * The cached value of the '{@link #getProvided() <em>Provided</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvided()
   * @generated
   * @ordered
   */
  protected ProvidedPort provided;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IotlangPackage.Literals.CONNECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance getCli()
  {
    if (cli != null && cli.eIsProxy())
    {
      InternalEObject oldCli = (InternalEObject)cli;
      cli = (Instance)eResolveProxy(oldCli);
      if (cli != oldCli)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.CONNECTOR__CLI, oldCli, cli));
      }
    }
    return cli;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance basicGetCli()
  {
    return cli;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCli(Instance newCli)
  {
    Instance oldCli = cli;
    cli = newCli;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.CONNECTOR__CLI, oldCli, cli));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequiredPort getRequired()
  {
    if (required != null && required.eIsProxy())
    {
      InternalEObject oldRequired = (InternalEObject)required;
      required = (RequiredPort)eResolveProxy(oldRequired);
      if (required != oldRequired)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.CONNECTOR__REQUIRED, oldRequired, required));
      }
    }
    return required;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequiredPort basicGetRequired()
  {
    return required;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequired(RequiredPort newRequired)
  {
    RequiredPort oldRequired = required;
    required = newRequired;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.CONNECTOR__REQUIRED, oldRequired, required));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance getSrv()
  {
    if (srv != null && srv.eIsProxy())
    {
      InternalEObject oldSrv = (InternalEObject)srv;
      srv = (Instance)eResolveProxy(oldSrv);
      if (srv != oldSrv)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.CONNECTOR__SRV, oldSrv, srv));
      }
    }
    return srv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance basicGetSrv()
  {
    return srv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSrv(Instance newSrv)
  {
    Instance oldSrv = srv;
    srv = newSrv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.CONNECTOR__SRV, oldSrv, srv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProvidedPort getProvided()
  {
    if (provided != null && provided.eIsProxy())
    {
      InternalEObject oldProvided = (InternalEObject)provided;
      provided = (ProvidedPort)eResolveProxy(oldProvided);
      if (provided != oldProvided)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.CONNECTOR__PROVIDED, oldProvided, provided));
      }
    }
    return provided;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProvidedPort basicGetProvided()
  {
    return provided;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProvided(ProvidedPort newProvided)
  {
    ProvidedPort oldProvided = provided;
    provided = newProvided;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.CONNECTOR__PROVIDED, oldProvided, provided));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IotlangPackage.CONNECTOR__CLI:
        if (resolve) return getCli();
        return basicGetCli();
      case IotlangPackage.CONNECTOR__REQUIRED:
        if (resolve) return getRequired();
        return basicGetRequired();
      case IotlangPackage.CONNECTOR__SRV:
        if (resolve) return getSrv();
        return basicGetSrv();
      case IotlangPackage.CONNECTOR__PROVIDED:
        if (resolve) return getProvided();
        return basicGetProvided();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IotlangPackage.CONNECTOR__CLI:
        setCli((Instance)newValue);
        return;
      case IotlangPackage.CONNECTOR__REQUIRED:
        setRequired((RequiredPort)newValue);
        return;
      case IotlangPackage.CONNECTOR__SRV:
        setSrv((Instance)newValue);
        return;
      case IotlangPackage.CONNECTOR__PROVIDED:
        setProvided((ProvidedPort)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.CONNECTOR__CLI:
        setCli((Instance)null);
        return;
      case IotlangPackage.CONNECTOR__REQUIRED:
        setRequired((RequiredPort)null);
        return;
      case IotlangPackage.CONNECTOR__SRV:
        setSrv((Instance)null);
        return;
      case IotlangPackage.CONNECTOR__PROVIDED:
        setProvided((ProvidedPort)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.CONNECTOR__CLI:
        return cli != null;
      case IotlangPackage.CONNECTOR__REQUIRED:
        return required != null;
      case IotlangPackage.CONNECTOR__SRV:
        return srv != null;
      case IotlangPackage.CONNECTOR__PROVIDED:
        return provided != null;
    }
    return super.eIsSet(featureID);
  }

} //ConnectorImpl
