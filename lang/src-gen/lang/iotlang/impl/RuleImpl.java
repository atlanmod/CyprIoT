/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.impl;

import java.util.Collection;

import lang.iotlang.IotlangPackage;
import lang.iotlang.Message;
import lang.iotlang.Port;
import lang.iotlang.Rule;
import lang.iotlang.Thing;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getName <em>Name</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getSubject <em>Subject</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getPermission <em>Permission</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getAction <em>Action</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getObject <em>Object</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getPorts <em>Ports</em>}</li>
 *   <li>{@link lang.iotlang.impl.RuleImpl#getObjectMessage <em>Object Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleImpl extends MinimalEObjectImpl.Container implements Rule
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubject() <em>Subject</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubject()
   * @generated
   * @ordered
   */
  protected Thing subject;

  /**
   * The default value of the '{@link #getPermission() <em>Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPermission()
   * @generated
   * @ordered
   */
  protected static final String PERMISSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPermission() <em>Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPermission()
   * @generated
   * @ordered
   */
  protected String permission = PERMISSION_EDEFAULT;

  /**
   * The default value of the '{@link #getAction() <em>Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected static final String ACTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected String action = ACTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getObject() <em>Object</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObject()
   * @generated
   * @ordered
   */
  protected Thing object;

  /**
   * The cached value of the '{@link #getPorts() <em>Ports</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPorts()
   * @generated
   * @ordered
   */
  protected EList<Port> ports;

  /**
   * The cached value of the '{@link #getObjectMessage() <em>Object Message</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectMessage()
   * @generated
   * @ordered
   */
  protected Message objectMessage;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IotlangPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thing getSubject()
  {
    if (subject != null && subject.eIsProxy())
    {
      InternalEObject oldSubject = (InternalEObject)subject;
      subject = (Thing)eResolveProxy(oldSubject);
      if (subject != oldSubject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.RULE__SUBJECT, oldSubject, subject));
      }
    }
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thing basicGetSubject()
  {
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubject(Thing newSubject)
  {
    Thing oldSubject = subject;
    subject = newSubject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__SUBJECT, oldSubject, subject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPermission()
  {
    return permission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPermission(String newPermission)
  {
    String oldPermission = permission;
    permission = newPermission;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__PERMISSION, oldPermission, permission));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAction()
  {
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAction(String newAction)
  {
    String oldAction = action;
    action = newAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__ACTION, oldAction, action));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thing getObject()
  {
    if (object != null && object.eIsProxy())
    {
      InternalEObject oldObject = (InternalEObject)object;
      object = (Thing)eResolveProxy(oldObject);
      if (object != oldObject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.RULE__OBJECT, oldObject, object));
      }
    }
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thing basicGetObject()
  {
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObject(Thing newObject)
  {
    Thing oldObject = object;
    object = newObject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__OBJECT, oldObject, object));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Port> getPorts()
  {
    if (ports == null)
    {
      ports = new EObjectResolvingEList<Port>(Port.class, this, IotlangPackage.RULE__PORTS);
    }
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message getObjectMessage()
  {
    if (objectMessage != null && objectMessage.eIsProxy())
    {
      InternalEObject oldObjectMessage = (InternalEObject)objectMessage;
      objectMessage = (Message)eResolveProxy(oldObjectMessage);
      if (objectMessage != oldObjectMessage)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IotlangPackage.RULE__OBJECT_MESSAGE, oldObjectMessage, objectMessage));
      }
    }
    return objectMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message basicGetObjectMessage()
  {
    return objectMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObjectMessage(Message newObjectMessage)
  {
    Message oldObjectMessage = objectMessage;
    objectMessage = newObjectMessage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.RULE__OBJECT_MESSAGE, oldObjectMessage, objectMessage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IotlangPackage.RULE__NAME:
        return getName();
      case IotlangPackage.RULE__SUBJECT:
        if (resolve) return getSubject();
        return basicGetSubject();
      case IotlangPackage.RULE__PERMISSION:
        return getPermission();
      case IotlangPackage.RULE__ACTION:
        return getAction();
      case IotlangPackage.RULE__OBJECT:
        if (resolve) return getObject();
        return basicGetObject();
      case IotlangPackage.RULE__PORTS:
        return getPorts();
      case IotlangPackage.RULE__OBJECT_MESSAGE:
        if (resolve) return getObjectMessage();
        return basicGetObjectMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IotlangPackage.RULE__NAME:
        setName((String)newValue);
        return;
      case IotlangPackage.RULE__SUBJECT:
        setSubject((Thing)newValue);
        return;
      case IotlangPackage.RULE__PERMISSION:
        setPermission((String)newValue);
        return;
      case IotlangPackage.RULE__ACTION:
        setAction((String)newValue);
        return;
      case IotlangPackage.RULE__OBJECT:
        setObject((Thing)newValue);
        return;
      case IotlangPackage.RULE__PORTS:
        getPorts().clear();
        getPorts().addAll((Collection<? extends Port>)newValue);
        return;
      case IotlangPackage.RULE__OBJECT_MESSAGE:
        setObjectMessage((Message)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.RULE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IotlangPackage.RULE__SUBJECT:
        setSubject((Thing)null);
        return;
      case IotlangPackage.RULE__PERMISSION:
        setPermission(PERMISSION_EDEFAULT);
        return;
      case IotlangPackage.RULE__ACTION:
        setAction(ACTION_EDEFAULT);
        return;
      case IotlangPackage.RULE__OBJECT:
        setObject((Thing)null);
        return;
      case IotlangPackage.RULE__PORTS:
        getPorts().clear();
        return;
      case IotlangPackage.RULE__OBJECT_MESSAGE:
        setObjectMessage((Message)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.RULE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IotlangPackage.RULE__SUBJECT:
        return subject != null;
      case IotlangPackage.RULE__PERMISSION:
        return PERMISSION_EDEFAULT == null ? permission != null : !PERMISSION_EDEFAULT.equals(permission);
      case IotlangPackage.RULE__ACTION:
        return ACTION_EDEFAULT == null ? action != null : !ACTION_EDEFAULT.equals(action);
      case IotlangPackage.RULE__OBJECT:
        return object != null;
      case IotlangPackage.RULE__PORTS:
        return ports != null && !ports.isEmpty();
      case IotlangPackage.RULE__OBJECT_MESSAGE:
        return objectMessage != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", permission: ");
    result.append(permission);
    result.append(", action: ");
    result.append(action);
    result.append(')');
    return result.toString();
  }

} //RuleImpl
