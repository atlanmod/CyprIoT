/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.impl;

import java.util.Collection;

import lang.iotlang.Channel;
import lang.iotlang.IotlangPackage;
import lang.iotlang.PointToPoint;
import lang.iotlang.PubSub;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Channel</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lang.iotlang.impl.ChannelImpl#getPubSub <em>Pub Sub</em>}</li>
 *   <li>{@link lang.iotlang.impl.ChannelImpl#getPointToPoint <em>Point To Point</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChannelImpl extends MinimalEObjectImpl.Container implements Channel
{
  /**
   * The cached value of the '{@link #getPubSub() <em>Pub Sub</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPubSub()
   * @generated
   * @ordered
   */
  protected EList<PubSub> pubSub;

  /**
   * The cached value of the '{@link #getPointToPoint() <em>Point To Point</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointToPoint()
   * @generated
   * @ordered
   */
  protected EList<PointToPoint> pointToPoint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IotlangPackage.Literals.CHANNEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PubSub> getPubSub()
  {
    if (pubSub == null)
    {
      pubSub = new EObjectContainmentEList<PubSub>(PubSub.class, this, IotlangPackage.CHANNEL__PUB_SUB);
    }
    return pubSub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PointToPoint> getPointToPoint()
  {
    if (pointToPoint == null)
    {
      pointToPoint = new EObjectContainmentEList<PointToPoint>(PointToPoint.class, this, IotlangPackage.CHANNEL__POINT_TO_POINT);
    }
    return pointToPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IotlangPackage.CHANNEL__PUB_SUB:
        return ((InternalEList<?>)getPubSub()).basicRemove(otherEnd, msgs);
      case IotlangPackage.CHANNEL__POINT_TO_POINT:
        return ((InternalEList<?>)getPointToPoint()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IotlangPackage.CHANNEL__PUB_SUB:
        return getPubSub();
      case IotlangPackage.CHANNEL__POINT_TO_POINT:
        return getPointToPoint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IotlangPackage.CHANNEL__PUB_SUB:
        getPubSub().clear();
        getPubSub().addAll((Collection<? extends PubSub>)newValue);
        return;
      case IotlangPackage.CHANNEL__POINT_TO_POINT:
        getPointToPoint().clear();
        getPointToPoint().addAll((Collection<? extends PointToPoint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.CHANNEL__PUB_SUB:
        getPubSub().clear();
        return;
      case IotlangPackage.CHANNEL__POINT_TO_POINT:
        getPointToPoint().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.CHANNEL__PUB_SUB:
        return pubSub != null && !pubSub.isEmpty();
      case IotlangPackage.CHANNEL__POINT_TO_POINT:
        return pointToPoint != null && !pointToPoint.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ChannelImpl
