/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.impl;

import java.util.Collection;

import lang.iotlang.Bind;
import lang.iotlang.Connect;
import lang.iotlang.Domain;
import lang.iotlang.InstanceChannel;
import lang.iotlang.InstancePolicy;
import lang.iotlang.InstanceThing;
import lang.iotlang.IotlangPackage;
import lang.iotlang.NetworkConfiguration;
import lang.iotlang.PlatformAnnotation;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Network Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getName <em>Name</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getConnects <em>Connects</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getDomain <em>Domain</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getBinds <em>Binds</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getThingInstances <em>Thing Instances</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getChannelInstances <em>Channel Instances</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getEnforces <em>Enforces</em>}</li>
 *   <li>{@link lang.iotlang.impl.NetworkConfigurationImpl#getInstancePoliciy <em>Instance Policiy</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NetworkConfigurationImpl extends MinimalEObjectImpl.Container implements NetworkConfiguration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<PlatformAnnotation> annotations;

  /**
   * The cached value of the '{@link #getConnects() <em>Connects</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnects()
   * @generated
   * @ordered
   */
  protected EList<Connect> connects;

  /**
   * The cached value of the '{@link #getDomain() <em>Domain</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomain()
   * @generated
   * @ordered
   */
  protected EList<Domain> domain;

  /**
   * The cached value of the '{@link #getBinds() <em>Binds</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinds()
   * @generated
   * @ordered
   */
  protected EList<Bind> binds;

  /**
   * The cached value of the '{@link #getThingInstances() <em>Thing Instances</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThingInstances()
   * @generated
   * @ordered
   */
  protected EList<InstanceThing> thingInstances;

  /**
   * The cached value of the '{@link #getChannelInstances() <em>Channel Instances</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannelInstances()
   * @generated
   * @ordered
   */
  protected EList<InstanceChannel> channelInstances;

  /**
   * The cached value of the '{@link #getEnforces() <em>Enforces</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnforces()
   * @generated
   * @ordered
   */
  protected EList<InstancePolicy> enforces;

  /**
   * The cached value of the '{@link #getInstancePoliciy() <em>Instance Policiy</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstancePoliciy()
   * @generated
   * @ordered
   */
  protected EList<InstancePolicy> instancePoliciy;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NetworkConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IotlangPackage.Literals.NETWORK_CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IotlangPackage.NETWORK_CONFIGURATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PlatformAnnotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<PlatformAnnotation>(PlatformAnnotation.class, this, IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Connect> getConnects()
  {
    if (connects == null)
    {
      connects = new EObjectContainmentEList<Connect>(Connect.class, this, IotlangPackage.NETWORK_CONFIGURATION__CONNECTS);
    }
    return connects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Domain> getDomain()
  {
    if (domain == null)
    {
      domain = new EObjectContainmentEList<Domain>(Domain.class, this, IotlangPackage.NETWORK_CONFIGURATION__DOMAIN);
    }
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Bind> getBinds()
  {
    if (binds == null)
    {
      binds = new EObjectContainmentEList<Bind>(Bind.class, this, IotlangPackage.NETWORK_CONFIGURATION__BINDS);
    }
    return binds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstanceThing> getThingInstances()
  {
    if (thingInstances == null)
    {
      thingInstances = new EObjectContainmentEList<InstanceThing>(InstanceThing.class, this, IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES);
    }
    return thingInstances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstanceChannel> getChannelInstances()
  {
    if (channelInstances == null)
    {
      channelInstances = new EObjectContainmentEList<InstanceChannel>(InstanceChannel.class, this, IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES);
    }
    return channelInstances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstancePolicy> getEnforces()
  {
    if (enforces == null)
    {
      enforces = new EObjectResolvingEList<InstancePolicy>(InstancePolicy.class, this, IotlangPackage.NETWORK_CONFIGURATION__ENFORCES);
    }
    return enforces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstancePolicy> getInstancePoliciy()
  {
    if (instancePoliciy == null)
    {
      instancePoliciy = new EObjectContainmentEList<InstancePolicy>(InstancePolicy.class, this, IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY);
    }
    return instancePoliciy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__CONNECTS:
        return ((InternalEList<?>)getConnects()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__DOMAIN:
        return ((InternalEList<?>)getDomain()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__BINDS:
        return ((InternalEList<?>)getBinds()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES:
        return ((InternalEList<?>)getThingInstances()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES:
        return ((InternalEList<?>)getChannelInstances()).basicRemove(otherEnd, msgs);
      case IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY:
        return ((InternalEList<?>)getInstancePoliciy()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IotlangPackage.NETWORK_CONFIGURATION__NAME:
        return getName();
      case IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS:
        return getAnnotations();
      case IotlangPackage.NETWORK_CONFIGURATION__CONNECTS:
        return getConnects();
      case IotlangPackage.NETWORK_CONFIGURATION__DOMAIN:
        return getDomain();
      case IotlangPackage.NETWORK_CONFIGURATION__BINDS:
        return getBinds();
      case IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES:
        return getThingInstances();
      case IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES:
        return getChannelInstances();
      case IotlangPackage.NETWORK_CONFIGURATION__ENFORCES:
        return getEnforces();
      case IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY:
        return getInstancePoliciy();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IotlangPackage.NETWORK_CONFIGURATION__NAME:
        setName((String)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends PlatformAnnotation>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__CONNECTS:
        getConnects().clear();
        getConnects().addAll((Collection<? extends Connect>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__DOMAIN:
        getDomain().clear();
        getDomain().addAll((Collection<? extends Domain>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__BINDS:
        getBinds().clear();
        getBinds().addAll((Collection<? extends Bind>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES:
        getThingInstances().clear();
        getThingInstances().addAll((Collection<? extends InstanceThing>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES:
        getChannelInstances().clear();
        getChannelInstances().addAll((Collection<? extends InstanceChannel>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__ENFORCES:
        getEnforces().clear();
        getEnforces().addAll((Collection<? extends InstancePolicy>)newValue);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY:
        getInstancePoliciy().clear();
        getInstancePoliciy().addAll((Collection<? extends InstancePolicy>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.NETWORK_CONFIGURATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__CONNECTS:
        getConnects().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__DOMAIN:
        getDomain().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__BINDS:
        getBinds().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES:
        getThingInstances().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES:
        getChannelInstances().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__ENFORCES:
        getEnforces().clear();
        return;
      case IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY:
        getInstancePoliciy().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IotlangPackage.NETWORK_CONFIGURATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IotlangPackage.NETWORK_CONFIGURATION__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__CONNECTS:
        return connects != null && !connects.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__DOMAIN:
        return domain != null && !domain.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__BINDS:
        return binds != null && !binds.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__THING_INSTANCES:
        return thingInstances != null && !thingInstances.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__CHANNEL_INSTANCES:
        return channelInstances != null && !channelInstances.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__ENFORCES:
        return enforces != null && !enforces.isEmpty();
      case IotlangPackage.NETWORK_CONFIGURATION__INSTANCE_POLICIY:
        return instancePoliciy != null && !instancePoliciy.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //NetworkConfigurationImpl
