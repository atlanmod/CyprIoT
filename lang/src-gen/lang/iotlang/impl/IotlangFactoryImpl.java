/**
 * generated by Xtext 2.13.0
 */
package lang.iotlang.impl;

import lang.iotlang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IotlangFactoryImpl extends EFactoryImpl implements IotlangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IotlangFactory init()
  {
    try
    {
      IotlangFactory theIotlangFactory = (IotlangFactory)EPackage.Registry.INSTANCE.getEFactory(IotlangPackage.eNS_URI);
      if (theIotlangFactory != null)
      {
        return theIotlangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IotlangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IotlangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IotlangPackage.IO_TLANG_MODEL: return createIoTLangModel();
      case IotlangPackage.PLATFORM_ANNOTATION: return createPlatformAnnotation();
      case IotlangPackage.THING: return createThing();
      case IotlangPackage.CHANNEL: return createChannel();
      case IotlangPackage.PUB_SUB: return createPubSub();
      case IotlangPackage.POINT_TO_POINT: return createPointToPoint();
      case IotlangPackage.POLICY: return createPolicy();
      case IotlangPackage.PORT: return createPort();
      case IotlangPackage.PROTOCOL: return createProtocol();
      case IotlangPackage.MESSAGE: return createMessage();
      case IotlangPackage.TOPIC: return createTopic();
      case IotlangPackage.RULE: return createRule();
      case IotlangPackage.DOMAIN: return createDomain();
      case IotlangPackage.INSTANCE_THING: return createInstanceThing();
      case IotlangPackage.INSTANCE_CHANNEL: return createInstanceChannel();
      case IotlangPackage.INSTANCE_POLICY: return createInstancePolicy();
      case IotlangPackage.NETWORK_CONFIGURATION: return createNetworkConfiguration();
      case IotlangPackage.BIND: return createBind();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IoTLangModel createIoTLangModel()
  {
    IoTLangModelImpl ioTLangModel = new IoTLangModelImpl();
    return ioTLangModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformAnnotation createPlatformAnnotation()
  {
    PlatformAnnotationImpl platformAnnotation = new PlatformAnnotationImpl();
    return platformAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thing createThing()
  {
    ThingImpl thing = new ThingImpl();
    return thing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Channel createChannel()
  {
    ChannelImpl channel = new ChannelImpl();
    return channel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PubSub createPubSub()
  {
    PubSubImpl pubSub = new PubSubImpl();
    return pubSub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointToPoint createPointToPoint()
  {
    PointToPointImpl pointToPoint = new PointToPointImpl();
    return pointToPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Policy createPolicy()
  {
    PolicyImpl policy = new PolicyImpl();
    return policy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Port createPort()
  {
    PortImpl port = new PortImpl();
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Protocol createProtocol()
  {
    ProtocolImpl protocol = new ProtocolImpl();
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Topic createTopic()
  {
    TopicImpl topic = new TopicImpl();
    return topic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstanceThing createInstanceThing()
  {
    InstanceThingImpl instanceThing = new InstanceThingImpl();
    return instanceThing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstanceChannel createInstanceChannel()
  {
    InstanceChannelImpl instanceChannel = new InstanceChannelImpl();
    return instanceChannel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstancePolicy createInstancePolicy()
  {
    InstancePolicyImpl instancePolicy = new InstancePolicyImpl();
    return instancePolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NetworkConfiguration createNetworkConfiguration()
  {
    NetworkConfigurationImpl networkConfiguration = new NetworkConfigurationImpl();
    return networkConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bind createBind()
  {
    BindImpl bind = new BindImpl();
    return bind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IotlangPackage getIotlangPackage()
  {
    return (IotlangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IotlangPackage getPackage()
  {
    return IotlangPackage.eINSTANCE;
  }

} //IotlangFactoryImpl
