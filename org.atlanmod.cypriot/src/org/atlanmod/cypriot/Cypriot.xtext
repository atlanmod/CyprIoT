grammar org.atlanmod.cypriot.Cypriot with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
// TODO import "platform:/resource/org.atlanmod.cypriot/ThingML.ecore" as thingml

generate cyprIoT "http://www.atlanmod.org/CyprIoT"

CyprIoTModel returns CyprIoTModel:
		(importThings+=Thing | 
		channels+=Channel|
		networks+=Network |
		users+=User |
		policies+=Policy |
		roles+=Role |
		globalBridges+=GlobalBridge)*;

NamedElement:
	User | Role | Thing | Network | Topic | PointToPoint | PubSub |
	InstanceThing | InstancePubSub | InstancePTP | ConnectionPoint | Topic |
	Bind |
	";" name=ID
;

Role:
	'role' name=ID
;

User :
	'user' name=ID 'assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*
;
// TODO [thingml::ThingMLModel]
Thing:
	'thing' name=ID 
		('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
		'import' importPath=STRING_LIT
;

NetworkProperty:
	'property' name=ID '=' propertyValue=STRING_LIT
;

ChannelProperty:
	'property' name=ID '=' propertyValue=STRING_LIT
;

// Dynamicity of the configuration

EnforcePolicy :
	'enforce' policyName+=[Policy] ( "," policyName+=[Policy])*
;

Domain:
	'domain' name=QualifiedName
;
Network:
	'network' name=ID '{'
		domain=Domain
		(enforcement=EnforcePolicy)?
		(networkProperty+=NetworkProperty |
		instances+=Instance |
		binds+=Bind | 
		channelBridge+=NetworkBridge
		)*
	'}'
;

Instance:
	InstanceThing | InstancePubSub | InstancePTP
;

InstanceThing :
	'instance' typeThing=[Thing] ':' name=ID ('['numberOfInstances=INT']')?  ('owner' owner=[User])? 'platform' platform=Platform
;
enum Platform:
	POSIX='POSIX' | 
	JAVA='JAVA' |
	ARDUINO='ARDUINO' |
	JAVASCRIPT='JS'
;

InstancePubSub :
	'instance' typePubSub=[PubSub] ':' name=ID  'platform' platform=PubSubProtocol
;

enum PubSubProtocol:
	MQTT='MQTT' | 
	AMQP='AMQP' 
;

InstancePTP :
	'instance' typePtP=[PointToPoint] ':' name=ID  'platform'  platform=PTPProtocol
;

enum PTPProtocol:
	HTTP='HTTP' | 
	COAP='COAP' |
	UPNP='UPNP' |
	ZIGBEE='ZIGBEE' |
	ZWAVE='ZWAVE'
;

PointToPoint:
	'channel:ptp' name=ID '{'
		(	channelProperties+=ChannelProperty |
			haspoints +=ConnectionPoint
		)*
	'}'
;

Channel:
	PubSub | PointToPoint
;

ConnectionPoint:
	'ConnectionPoint'  name=ID ('(' hasParameters+=ID ( "," assignedRoles+=ID)* ')')*
;

PubSub:
	'channel:pubsub' name=ID '{'
		(	channelProperties+=ChannelProperty |
			hasTopics +=Topic
		)*
	'}'
;

Topic:
	'topic'  name=ID  ('subtopicOf' subtopicOf+=[Topic])?
;

// TODO subjectPort=[thingml::Port]
Bind:
	'bind'	(name=ID)? thingInstance=[InstanceThing]"." portToBind=ID readOrWrite=ReadOrWrite channelToBind=ChannelToBind
;

enum ReadOrWrite:
	READ='<=' |
	WRITE='=>'
;

ChannelToBind:
	ToBindPubSub | ToBindPTP
;

ToBindPubSub:
	 pubSubInstance=[InstancePubSub] '{' topics+=[Topic] ( "," topics+=[Topic])*'}'
;

ToBindPTP:
	ptpInstance=[InstancePTP] '.' (ConnectionPoint=[ConnectionPoint] | regularExpression=OrRegularExpression | allConnections='*')
;

GlobalBridge:
	'bridge' name=ID '{'
		
	'}'
;

NetworkBridge:
	'bridge' bind=[BridgeSubject] 'to' channel=ChannelToBind
;

BridgeSubject:
	Bind | Topic | ConnectionPoint
;

Policy:
	'policy' name=ID '{'
		(rules+=Rule)*
	'}'
;

Rule:
	'rule' (name=ID)? ruleSubject=[RuleSubject] ruleEffect=RuleEffect action=RuleAction ruleObject=[RuleObject] ('when' ruleConditions=ConditionExpression)?
;
enum RuleEffect :
	DENY='deny' |
	ALLOW='allow' |
	TRIGGER='trigger' |
	BRIDGE='bridge'
;

enum RuleAction:
	SEND='send' | 
	RECEIVE='receive' |  
	PERFORMTRANSITION='performTransition' | 
	GOTOSTATE='goToState' | 
	EXECUTEFUNCTION='executeFunction'
;

RuleSubject:
	Thing | Role | User
;

RuleObject:
	Thing | Role | User | Channel | Topic | ConnectionPoint
;

ConditionExpression:
	OrExpression
;

OrExpression returns Expression:
	AndExpression ({OrExpression.lhs=current} "or" rhs=AndExpression)*
;

AndExpression returns Expression:
	Equality ({AndExpression.lhs=current} "and" rhs=Equality)*
;

Equality returns Expression:
	Comparaison (
	( {EqualsExpression.lhs=current} "==" rhs=Comparaison ) |
	( {NotEqualsExpression.lhs=current} "!=" rhs=Comparaison )
	)*	
;

Comparaison returns Expression:
	Addition (
	( {GreaterExpression.lhs=current} ">" rhs=Addition ) |
	( {LowerExpression.lhs=current} "<" rhs=Addition ) |
	( {GreaterOrEqualExpression.lhs=current} ">=" rhs=Addition ) |
	( {LowerOrEqualExpression.lhs=current} "<=" rhs=Addition )
	)*
;

Addition returns Expression:
	Multiplication (
	( {PlusExpression.lhs=current} "+" rhs=Multiplication ) |
	( {MinusExpression.lhs=current} "-" rhs=Multiplication )
	)*	
;

Multiplication returns Expression:
	Primary (
	( {TimesExpression.lhs=current} "*" rhs=Primary ) |
	( {DivExpression.lhs=current} "/" rhs=Primary ) |
	( {ModExpression.lhs=current} "%" rhs=Primary)
	)*	
;

Primary returns Expression:
	{ExpressionGroup} '(' term=ConditionExpression ')' |
	{NotExpression} "not" term=Primary |
	{UnaryMinus} '-' term=Primary |
	AtomicExpression
;

AtomicExpression returns Expression:
	Literal
;

Literal returns Literal:
	ByteLiteral | CharLiteral | IntegerLiteral | StringLiteral | DoubleLiteral | AnyValue
;

AnyValue returns AnyValue:
	anyValue=ID;

ByteLiteral returns ByteLiteral:
	byteValue=BYTE;
	
CharLiteral returns CharLiteral:
	charValue=CHAR;

IntegerLiteral returns IntegerLiteral:
	intValue=INT;
	
DoubleLiteral returns DoubleLiteral:
	doubleValue = FLOAT;
	
StringLiteral returns StringLiteral:
	stringValue=STRING_LIT;


RegularExpression:
	OrRegularExpression
;

OrRegularExpression:
	SequenceExpression ({OrRegularExpression.left = current} '+' right=SequenceExpression)*
;

SequenceExpression:
	HighBindExpression ({SequenceExpression.left = current} right = HighBindExpression)*
;

HighBindExpression:
        AtomicRegularExpression ('*'{StarExpression.innerExpression=current} '*'* )?
;

AtomicRegularExpression:
	BracedExpression | Atom
;

BracedExpression:
	'(' innerExpression = RegularExpression ')'
;

Atom:
	value = CHARI
;

terminal CHARI returns ecore::EChar:
	('a'..'z'|'A'..'Z'|'0'..'9'|'\\0'|'*')
;

@Override
terminal WS			: (' '|'\t'|'\r'|'\n')+;
@Override
terminal ANY_OTHER: .;

// Terminals
terminal BYTE returns ecore::EByte: "0x" ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F');

terminal CHAR returns ecore::EByte: "'" ('\\0'|'\\t'|'\\n'|'\\r'|' '..'&'|'\\\''|'('..'['|'\\\\'|']'..'~') "'";

terminal FLOAT returns ecore::EDouble :
('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| '.' ('0'..'9')+ (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| ('0'..'9')+ ('e'|'E') ('+' | '-')? ('0'..'9')+;


@Override 
terminal INT returns ecore::EInt: ('1'..'9')('0'..'9')*;

terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal ANNOTATION_ID:
	"@" ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*; 