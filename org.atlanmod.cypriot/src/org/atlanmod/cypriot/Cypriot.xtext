grammar org.atlanmod.cypriot.Cypriot with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.thingml.org/xtext/ThingML" as thingml

generate cyprIoT "http://www.atlanmod.org/CyprIoT"

CyprIoTModel returns CyprIoTModel:
		imports+=Import*
		(declareThings+=Thing | 
		declareChannels+=Channel|
		specifyNetworks+=Network |
		declareUsers+=User |
		specifyPolicies+=Policy |
		declareRoles+=Role)*;

Import:
	'import' importURI=STRING 
;

NamedElement:
	User | Role | Thing | Network | Topic | PointToPoint | PubSub |
	InstanceThing | InstancePubSub | InstancePTP | ConnectionPoint | Topic |
	Bind |  Policy | ToBindPTP | ToBindPubSub | Rule |
	";" name=ID
;

Role:
	'role' name=ID
;

User :
	'user' name=ID ('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
;

Thing:
	'thing' name=ID 
		('assigned' assignedRoles+=[Role] ( "," assignedRoles+=[Role])*)?
		'import' importPath=STRING
;

// TODO Dynamicity of the configuration

PoliciesEnforcement :
	'enforce' policyName+=[Policy] ( "," policyName+=[Policy])* combiningAlgo=CombiningAlgo
;

enum CombiningAlgo:
	DENY='override-deny' | 
	ALLOW='override-allow'
;

Domain:
	'domain' name=DomainId
;
Network:
	'network' name=ID '{'
		domain=Domain
		(hasPolicyEnforcement=PoliciesEnforcement)?
		(instantiate+=Instance |
		hasBinds+=Bind 
		|hasNetworkBridges+=NetworkBridge
		)*
	'}'
;

Instance:
	InstanceThing | InstancePubSub | InstancePTP
;

InstanceThing :
	'instance' name=ID  ('['declareNumberOfInstances=INT']')? ':' thingToInstantiate=[Thing] ('owner' owner=[User])? 'platform' targetedPlatform=Platform
;


InstancePubSub :
	'instance' name=ID ':' pubSubToInstantiate=[PubSub]   'platform' targetedPlatform=PubSubProtocol
;

InstancePTP :
	'instance' name=ID ':' ptPToInstantiate=[PointToPoint]    'platform'  targetedPlatform=PTPProtocol
;

Channel:
	PubSub | PointToPoint
;

PubSub:
	'channel:pubsub' name=ID '{'
		(hasTopics+=Topic)*
	'}'
;

Topic:
	'topic'  name=ID ('(' acceptedMessages+=ID ( "," assignedRoles+=ID)* ')')*  ('subtopicOf' subtopicOf+=[Topic])?
;

PointToPoint:
	'channel:ptp' name=ID '{'
		(hasConnectionPoints+=ConnectionPoint)*
	'}'
;

ConnectionPoint:
	'ConnectionPoint'  name=ID ('(' acceptedMessages+=ID ( "," assignedRoles+=ID)* ')')*
;

Bind:
	'bind'	(name=ID ':')? bindsInstanceThing=[InstanceThing]("." portToBind=[thingml::Port])? bindAction=BindAction channelToBind=ChannelToBind
;

enum Platform:
	POSIX='CPOSIX' | 
	JAVA='JAVA' |
	ARDUINO='ARDUINO' |
	JS='JS' |
	PYTHON='PYTHON'
;

enum PubSubProtocol:
	MQTT='MQTT' | 
	AMQP='AMQP' 
;

enum PTPProtocol:
	HTTP='HTTP' | 
	COAP='COAP' |
	UPNP='UPNP' |
	ZIGBEE='ZIGBEE' |
	ZWAVE='ZWAVE'
;

enum BindAction:
	READ='<=' |
	WRITE='=>'
;

ChannelToBind:
	ToBindPubSub | ToBindPTP
;

ToBindPubSub:
	 targetedPubSubInstance=[InstancePubSub] '{' topics+=[Topic] ( "," topics+=[Topic])*'}'
;

ToBindPTP:
	targetedPtpInstance=[InstancePTP] '.' (bindsToConnectionPoint=[ConnectionPoint] /* TODO | filterConnectionPointsUsingRegex=RegularExpression*/)
;

BridgeSubject:
	Bind | Topic | ConnectionPoint
;

Policy:
	'policy' name=ID '{'
		(hasRules+=Rule)*
	'}'
;

Rule:
	(RuleComm | RuleTrigger | BridgeSubjectObject) (conditions=Conditions)?

;

RuleComm:
	'rule' (name=ID ':')? commSubject=CommSubjectObject effectComm=EffectComm commObject=CommSubjectObject
;

RuleTrigger:
	'rule' (name=ID ':')? thingWithState=ThingWithState effectTrigger=EffectTrigger
;

RuleBridge:
	'rule' (name=ID ':')? thingWithState=ThingWithState effectTrigger=EffectTrigger
;

BridgeSubjectObject:
	pubsub=[PubSub] '->' 'topic:' topic=[Topic] | pubsub=[PointToPoint] '->' 'connectionPoint:' topic=[ConnectionPoint] | thingWithPort=ThingWithPort
;

CommSubjectObject :
	thingWithStateOrPort=ThingWithStateOrPort | subjectOther=[SubjectObjectOther]
;

ThingAny:
	InstanceThing | Thing
;

SubjectObjectOther:
	Role | User | ThingAny
;

ThingWithStateOrPort:
	ThingWithPort | ThingWithState
;

GetPort:
	'->' 'port:' port=[thingml::Port]
;

GetState:
	'->' 'state:' state=[thingml::State]
;

GetFunction:
	'->' 'function:' function=[thingml::Function]
;

ThingWithPort:
	thing=[ThingAny] getPort=GetPort
;

ThingWithState:
	thing=[ThingAny] getState=GetState
;

ThingWithFunction:
	thing=[ThingAny] getFunction=GetFunction
;

EffectComm:
	(deny?='deny:' | allow?='allow:') actionComm=ActionComm
;

EffectTrigger:
	trigger='trigger:' actionTrigger=ActionTrigger
;

ActionTrigger:
	performTransition='performTransition' thingAny=ThingAny | 
	goToState='goToState' thingWithState=ThingWithState | 
	executeFunction='executeFunction' thingWithFunction=ThingWithFunction
;

enum ActionComm:
	send='send' | 
	receive='receive' |
	sendreceive='send-receive'
;

Conditions:
	'when' conditionExpression=ConditionsExpression
;

ConditionsExpression: OrExpression;

OrExpression returns Expression:
	AndExpression ({OrExpression.lhs=current} "or" rhs=AndExpression)*
;

AndExpression returns Expression:
	ExpressionAttribute ({AndExpression.lhs=current} "and" rhs=ExpressionAttribute)*
;

ExpressionAttribute:
	attribute=[ThingAny] '->' ((currentState?='currentState:' | nextState?='nextState:') subjectState=[thingml::State] | ( 'property:' subjectProperty=[thingml::Property] | 'message:' subjectMessage=[thingml::Message]'.'parameterMessage=[thingml::Parameter]) '=' subjectContentEqual=STRING)
;

DomainId:
	ValidID (=>'.' ValidID)+
;

NetworkBridge:
	'bridge' (name=ID ':')? bridgeSubject=[BridgeSubject] | bridgePort=[thingml::Port] actionBridge=ActionBridge bridgeToChannel=ChannelToBind
;
enum ActionBridge:
	from='from'| 
	to='to'
;

/*
// TODO add conditions to rule


// TODO add time standard declaration
terminal TIME:
	
;

// TODO add location standard declaration
terminal LOCATION:
	
;
*/